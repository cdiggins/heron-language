adjacentDifferences(xs) :: (Func (Array T0) (Array T0))
all(xs, p) :: (Func (Array T0) (Func T0 Bool) Bool)
any(xs, p) :: (Func (Array T0) (Func T0 Bool) Bool)
array(v) :: (Func Float3 (Array Float))
array(v) :: (Func Float3 (Array Float))
average(xs) :: (Func (Array Float) Float)
cartesianProduct(xs, ys, f) :: (Func (Array T0) (Array T1) (Func T0 T1 T2) (Array T2))
concat(xs, ys) :: (Func (Array T0) (Array T0) (Array T0))
cross(a, b) :: (Func Float3 Float3 Float3)
cut(xs, from, n) :: (Func (Array T0) Int Int (Array T0))
cylinder() :: (Func Mesh)
cylinder(segments) :: (Func Int Mesh)
cylinderPoint(u, v) :: (Func Int Float Float3)
distance(a, b) :: (Func Float3 Float3 Float)
distance2(a, b) :: (Func Float3 Float3 Float)
dot(a, b) :: (Func Float3 Float3 Float)
drop(xs, n) :: (Func (Array T0) Int (Array T0))
empty(xs) :: (Func (Array T0) Bool)
eq(xs, ys) :: (Func (Array T0) (Array T1) Bool)
faceCount(mesh) :: (Func Mesh Int)
filter(xs, p) :: (Func (Array T0) (Func T0 Bool) (Array T0))
first(xs) :: (Func (Array T0) T0)
flatMap(xs, f) :: (Func (Array T0) (Func T0 (Array T1)) (Array T1))
flatten(xs) :: (Func (Array (Array T0)) (Array T0))
float3(xs) :: (Func (Array Float) Float3)
gen(cnt, f) :: (Func Int (Func Int T0) (Array T0))
geometryTest() :: (Func (Array (Func Float Float Float Mesh)))
inRange(xs, n) :: (Func (Array T0) Int Bool)
indices(xs) :: (Func (Array T0) (Array Int))
last(xs, n) :: (Func (Array T0) Int (Array T0))
last(xs) :: (Func (Array T0) T0)
length(v) :: (Func Float3 Float)
length2(v) :: (Func Float3 Float)
lerp(a, b, x) :: (Func Float Float Float Float)
longer(xs, ys) :: (Func (Array T0) (Array T0) (Array T0))
main() :: (Func (Array (Func Float Float Float Mesh)))
map(xs, f) :: (Func (Array T0) (Func T0 T1) (Array T1))
mapIndex(xs, f) :: (Func (Array T0) (Func Int T1) (Array T1))
mapWithIndex(xs, f) :: (Func (Array T0) (Func T0 Int T1) (Array T1))
max(x, y) :: (Func T0 T0 T0)
max(xs) :: (Func (Array T0) T0)
median(xs) :: (Func (Array Int) Int)
meshFromUV(f, uCount, vCount, uStart, vStart, uLength, vLength) :: (Func (Func Float Float Float3) Int Int Float Float Float Float Mesh)
meshFromUV(f, segments) :: (Func (Func Float Float Float3) Int Mesh)
min(xs) :: (Func (Array T0) T0)
min(x, y) :: (Func T0 T0 T0)
negate(v) :: (Func Float3 Float3)
normal(v) :: (Func Float3 Float)
op%(a, b) :: (Func Float3 Float3 Float3)
op%(a, b) :: (Func Float2 Float2 Float2)
op*(a, b) :: (Func Float2 Float2 Float2)
op*(a, b) :: (Func Float3 Float3 Float3)
op+(a, b) :: (Func Float2 Float2 Float2)
op+(a, b) :: (Func Float3 Float3 Float3)
op-(a, b) :: (Func Float2 Float2 Float2)
op-(a, b) :: (Func Float3 Float3 Float3)
op..(from, upto) :: (Func Int Int (Array Int))
op/(a, b) :: (Func Float2 Float2 Float2)
op/(a, b) :: (Func Float3 Float3 Float3)
op[](xs, i) :: (Func (Array T0) Int T0)
partition(a, lo, hi) :: (Func (Array T0) Int Int Int)
prefixScan(xs, op) :: (Func (Array T0) (Func T0 T0 T0) (Array T0))
product(xs) :: (Func (Array Float) Float)
pushMany(xs, ys) :: (Func (ArrayBuilder T0) (Array T0) (ArrayBuilder T0))
qsort(a, lo, hi) :: (Func (Array T0) Int Int (Array T0))
quadStripToMeshIndices(vertices, rows, connectRows, connectCols) :: (Func (Array T0) Int Bool Bool (Array Int))
reduce(xs, acc, f) :: (Func (Array T0) T1 (Func T1 T0 T1) T1)
reflect(v, n) :: (Func Float3 Float3 Float)
reify(xs) :: (Func (Array T0) (Array T0))
repeat(x, n) :: (Func T0 Int (Array T0))
rescale(v, from, length) :: (Func T0 T0 T0 T0)
reverse(xs, n) :: (Func (Array T0) T1 (Array T0))
scale(m, amount) :: (Func Mesh Float3 Mesh)
selectByIndex(xs, indices) :: (Func (Array T0) (Array Int) (Array T0))
setVertices(m, points) :: (Func Mesh (Array Float3) Mesh)
shorter(xs, ys) :: (Func (Array T0) (Array T0) (Array T0))
simpleArrayTest() :: (Func T0)
skip(xs, n) :: (Func (Array T0) Int (Array T0))
slice(xs, from, to) :: (Func (Array T0) Int Int (Array T0))
slices(xs, n) :: (Func (Array T0) Int (Array (Array T0)))
sort(xs) :: (Func (Array T0) (Array T0))
sphere() :: (Func Mesh)
sphere(segments) :: (Func Int Mesh)
spherePoint(u, v) :: (Func Float Float Float3)
splice(xs, from, ys) :: (Func (Array T0) Int (Array T0) (Array T0))
stride(xs, from, n) :: (Func (Array T0) Int Int (Array T0))
stride(xs, n) :: (Func (Array T0) Int (Array T0))
strides(xs, n) :: (Func (Array T0) Int (Array (Array T0)))
sum(xs) :: (Func (Array Float) Float)
sumComponents(v) :: (Func Float3 Float)
swapElements(xs, i, j) :: (Func (ArrayBuilder T0) Int Int (ArrayBuilder T0))
tail(xs) :: (Func (Array T0) (Array T0))
take(xs, n) :: (Func (Array T0) Int (Array T0))
take(xs, i, n) :: (Func (Array T0) Int Int (Array T0))
testSphere(offX, offY, offZ) :: (Func Float Float Float Mesh)
toVertexBuffer(xs) :: (Func (Array Float3) (Array Float))
torus(r1, r2, segments) :: (Func Float Float Int Mesh)
torus() :: (Func Mesh)
torusPoint(u, v, r1, r2) :: (Func Int Int Float Float Float3)
transform(m, f) :: (Func Mesh (Func Float3 Float3) Mesh)
translate(m, amount) :: (Func Mesh Float3 Mesh)
unit(x) :: (Func T0 (Array T0))
vector(x, y, z) :: (Func Float Float Float Float3)
vector(uv) :: (Func Float2 Float3)
vector(xs) :: (Func (Array Float) Float3)
vector(x) :: (Func Float Float3)
vertex(mesh, i) :: (Func Mesh Int Float3)
vertexCount(mesh) :: (Func Mesh Int)
vertices(mesh) :: (Func Mesh (Array Float3))
zip(xs, ys, f) :: (Func (Array T0) (Array T1) (Func T0 T1 T2) (Array T2))
