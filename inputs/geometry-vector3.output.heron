// Generated on Thu Mar 15 2018 19:14:07 GMT-0400 (Eastern Daylight Time)
heron:std:0.1// scope module_605
heron:geometry.vector:0.1{
var // definition origin_VarDef14
// type Any
origin// expression FunCall vector(0,0,0)
// type Any
// reference vector_8:varName:var[vector_FuncDef100, vector_FuncDef124, vector_FuncDef154, vector_FuncDef190]
// expression VarName vector
// type Any
vector(// expression NumLiteral 0
// type Num
0, // expression NumLiteral 0
// type Num
0, // expression NumLiteral 0
// type Num
0);
var // definition ones_VarDef26
// type Any
ones// expression FunCall vector(1,1,1)
// type Any
// reference vector_20:varName:var[vector_FuncDef100, vector_FuncDef124, vector_FuncDef154, vector_FuncDef190]
// expression VarName vector
// type Any
vector(// expression NumLiteral 1
// type Num
1, // expression NumLiteral 1
// type Num
1, // expression NumLiteral 1
// type Num
1);
var // definition xaxis_VarDef38
// type Any
xaxis// expression FunCall vector(1,0,0)
// type Any
// reference vector_32:varName:var[vector_FuncDef100, vector_FuncDef124, vector_FuncDef154, vector_FuncDef190]
// expression VarName vector
// type Any
vector(// expression NumLiteral 1
// type Num
1, // expression NumLiteral 0
// type Num
0, // expression NumLiteral 0
// type Num
0);
var // definition yaxis_VarDef50
// type Any
yaxis// expression FunCall vector(0,1,0)
// type Any
// reference vector_44:varName:var[vector_FuncDef100, vector_FuncDef124, vector_FuncDef154, vector_FuncDef190]
// expression VarName vector
// type Any
vector(// expression NumLiteral 0
// type Num
0, // expression NumLiteral 1
// type Num
1, // expression NumLiteral 0
// type Num
0);
var // definition zaxis_VarDef62
// type Any
zaxis// expression FunCall vector(0,0,1)
// type Any
// reference vector_56:varName:var[vector_FuncDef100, vector_FuncDef124, vector_FuncDef154, vector_FuncDef190]
// expression VarName vector
// type Any
vector(// expression NumLiteral 0
// type Num
0, // expression NumLiteral 0
// type Num
0, // expression NumLiteral 1
// type Num
1);
// scope funcDef_100
// definition vector_FuncDef100
// type ((Float Float Float) -> Any)

/**
function vector(x: Float, y: Float, z: Float) 
        = float3(x, y, z);

    
*/
// scope funcDef_100
// definition vector_FuncDef100
// type ((Float Float Float) -> Any)
function vector(// definition x_FuncParamDef73
// type Float
x : // type Float
// reference Float_71:typeName:type[Float_TypeDef6]
Float, // definition y_FuncParamDef79
// type Float
y : // type Float
// reference Float_77:typeName:type[Float_TypeDef6]
Float, // definition z_FuncParamDef85
// type Float
z : // type Float
// reference Float_83:typeName:type[Float_TypeDef6]
Float)
// expression FunCall float3(x,y,z)
// type Any
// reference float3_89:varName:var[float3_FuncDef110, float3_FuncDef1326]
// expression VarName float3
// type Any
float3(// reference x_91:varName:var[x_FuncParamDef73]
// expression VarName x
// type Any
x, // reference y_93:varName:var[y_FuncParamDef79]
// expression VarName y
// type Any
y, // reference z_95:varName:var[z_FuncParamDef85]
// expression VarName z
// type Any
z)// scope funcDef_124
// definition vector_FuncDef124
// type ((Float) -> Any)

/**
function vector(x: Float)
        = vector(x, x, x);

    
*/
// scope funcDef_124
// definition vector_FuncDef124
// type ((Float) -> Any)
function vector(// definition x_FuncParamDef109
// type Float
x : // type Float
// reference Float_107:typeName:type[Float_TypeDef6]
Float)
// expression FunCall vector(x,x,x)
// type Any
// reference vector_113:varName:var[vector_FuncDef100, vector_FuncDef124, vector_FuncDef154, vector_FuncDef190]
// expression VarName vector
// type Any
vector(// reference x_115:varName:var[x_FuncParamDef109]
// expression VarName x
// type Any
x, // reference x_117:varName:var[x_FuncParamDef109]
// expression VarName x
// type Any
x, // reference x_119:varName:var[x_FuncParamDef109]
// expression VarName x
// type Any
x)// scope funcDef_154
// definition vector_FuncDef154
// type ((Any) -> Any)

/**
function vector(v)
        = vector(v.x, v.y, v.z);

    
*/
// scope funcDef_154
// definition vector_FuncDef154
// type ((Any) -> Any)
function vector(// definition v_FuncParamDef130
// type Any
v)
// expression FunCall vector(x(v),y(v),z(v))
// type Any
// reference vector_134:varName:var[vector_FuncDef100, vector_FuncDef124, vector_FuncDef154, vector_FuncDef190]
// expression VarName vector
// type Any
vector(// expression FunCall x(v)
// type Any
// reference x_135:varName:var[x_FuncDef66, x_FuncDef126, x_FuncDef208]
// expression VarName x
// type Any
x(// reference v_137:varName:var[v_FuncParamDef130]
// expression VarName v
// type Any
v), // expression FunCall y(v)
// type Any
// reference y_140:varName:var[y_FuncDef82, y_FuncDef142, y_FuncDef224]
// expression VarName y
// type Any
y(// reference v_142:varName:var[v_FuncParamDef130]
// expression VarName v
// type Any
v), // expression FunCall z(v)
// type Any
// reference z_145:varName:var[z_FuncDef158, z_FuncDef240]
// expression VarName z
// type Any
z(// reference v_147:varName:var[v_FuncParamDef130]
// expression VarName v
// type Any
v))// scope funcDef_190
// definition vector_FuncDef190
// type ((Array) -> Any)

/**
function vector(xs: Array)
        = vector(xs[0], xs[1], xs[2]);

    
*/
// scope funcDef_190
// definition vector_FuncDef190
// type ((Array) -> Any)
function vector(// definition xs_FuncParamDef163
// type Array
xs : // type Array
// reference Array_161:typeName:type[Array_TypeDef22]
Array)
// expression FunCall vector(op[](xs,0),op[](xs,1),op[](xs,2))
// type Any
// reference vector_167:varName:var[vector_FuncDef100, vector_FuncDef124, vector_FuncDef154, vector_FuncDef190]
// expression VarName vector
// type Any
vector(// expression FunCall op[](xs,0)
// type Any
// reference op[]_168:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_170:varName:var[xs_FuncParamDef163]
// expression VarName xs
// type Any
xs, // expression NumLiteral 0
// type Num
0), // expression FunCall op[](xs,1)
// type Any
// reference op[]_174:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_176:varName:var[xs_FuncParamDef163]
// expression VarName xs
// type Any
xs, // expression NumLiteral 1
// type Num
1), // expression FunCall op[](xs,2)
// type Any
// reference op[]_180:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_182:varName:var[xs_FuncParamDef163]
// expression VarName xs
// type Any
xs, // expression NumLiteral 2
// type Num
2))// scope funcDef_217
// definition array_FuncDef217
// type ((Any) -> Any)

/**
function array(v) 
        = [v.x, v.y, v.z];

    
*/
// scope funcDef_217
// definition array_FuncDef217
// type ((Any) -> Any)
function array(// definition v_FuncParamDef196
// type Any
v)
// expression ArrayLiteral [x(v),y(v),z(v)]
// type Array
[// expression FunCall x(v)
// type Any
// reference x_199:varName:var[x_FuncDef66, x_FuncDef126, x_FuncDef208]
// expression VarName x
// type Any
x(// reference v_201:varName:var[v_FuncParamDef196]
// expression VarName v
// type Any
v), // expression FunCall y(v)
// type Any
// reference y_204:varName:var[y_FuncDef82, y_FuncDef142, y_FuncDef224]
// expression VarName y
// type Any
y(// reference v_206:varName:var[v_FuncParamDef196]
// expression VarName v
// type Any
v), // expression FunCall z(v)
// type Any
// reference z_209:varName:var[z_FuncDef158, z_FuncDef240]
// expression VarName z
// type Any
z(// reference v_211:varName:var[v_FuncParamDef196]
// expression VarName v
// type Any
v)]// scope funcDef_249
// definition sum_FuncDef249
// type ((Any) -> Any)

/**
function sum(v) 
        = v.x + v.y + v.z;
    
    
*/
// scope funcDef_249
// definition sum_FuncDef249
// type ((Any) -> Any)
function sum(// definition v_FuncParamDef223
// type Any
v)
// expression FunCall op+(op+(x(v),y(v)),z(v))
// type Any
// reference op+_226:varName:var[op+_FuncDef619]
// expression VarName op+
// type Any
op+(// expression FunCall op+(x(v),y(v))
// type Any
// reference op+_227:varName:var[op+_FuncDef619]
// expression VarName op+
// type Any
op+(// expression FunCall x(v)
// type Any
// reference x_228:varName:var[x_FuncDef66, x_FuncDef126, x_FuncDef208]
// expression VarName x
// type Any
x(// reference v_230:varName:var[v_FuncParamDef223]
// expression VarName v
// type Any
v), // expression FunCall y(v)
// type Any
// reference y_233:varName:var[y_FuncDef82, y_FuncDef142, y_FuncDef224]
// expression VarName y
// type Any
y(// reference v_235:varName:var[v_FuncParamDef223]
// expression VarName v
// type Any
v)), // expression FunCall z(v)
// type Any
// reference z_240:varName:var[z_FuncDef158, z_FuncDef240]
// expression VarName z
// type Any
z(// reference v_242:varName:var[v_FuncParamDef223]
// expression VarName v
// type Any
v))// scope funcDef_274
// definition dot_FuncDef274
// type ((Any Any) -> Any)

/**
function dot(a, b) 
        = sum(a * b);    
    
    
*/
// scope funcDef_274
// definition dot_FuncDef274
// type ((Any Any) -> Any)
function dot(// definition a_FuncParamDef255
// type Any
a, // definition b_FuncParamDef258
// type Any
b)
// expression FunCall sum(op*(a,b))
// type Any
// reference sum_262:varName:var[sum_FuncDef249]
// expression VarName sum
// type Any
sum(// expression FunCall op*(a,b)
// type Any
// reference op*_263:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// reference a_265:varName:var[a_FuncParamDef255]
// expression VarName a
// type Any
a, // reference b_267:varName:var[b_FuncParamDef258]
// expression VarName b
// type Any
b))// scope funcDef_294
// definition length_FuncDef294
// type ((Any) -> Any)

/**
function length(v) 
        = sqrt(v.length2);    
    
    
*/
// scope funcDef_294
// definition length_FuncDef294
// type ((Any) -> Any)
function length(// definition v_FuncParamDef280
// type Any
v)
// expression FunCall sqrt(length2(v))
// type Any
// reference sqrt_284:varName:var[sqrt_FuncDef580]
// expression VarName sqrt
// type Any
sqrt(// expression FunCall length2(v)
// type Any
// reference length2_285:varName:var[length2_FuncDef312]
// expression VarName length2
// type Any
length2(// reference v_287:varName:var[v_FuncParamDef280]
// expression VarName v
// type Any
v))// scope funcDef_312
// definition length2_FuncDef312
// type ((Any) -> Any)

/**
function length2(v) 
        = v.dot(v);        

    
*/
// scope funcDef_312
// definition length2_FuncDef312
// type ((Any) -> Any)
function length2(// definition v_FuncParamDef300
// type Any
v)
// expression FunCall dot(v,v)
// type Any
// reference dot_303:varName:var[dot_FuncDef274]
// expression VarName dot
// type Any
dot(// reference v_305:varName:var[v_FuncParamDef300]
// expression VarName v
// type Any
v, // reference v_307:varName:var[v_FuncParamDef300]
// expression VarName v
// type Any
v)// scope funcDef_337
// definition distance_FuncDef337
// type ((Any Any) -> Any)

/**
function distance(a, b)
        = (a - b).length;

    
*/
// scope funcDef_337
// definition distance_FuncDef337
// type ((Any Any) -> Any)
function distance(// definition a_FuncParamDef318
// type Any
a, // definition b_FuncParamDef321
// type Any
b)
// expression FunCall length(op-(a,b))
// type Any
// reference length_324:varName:var[length_FuncDef294]
// expression VarName length
// type Any
length(// expression FunCall op-(a,b)
// type Any
(// expression FunCall op-(a,b)
// type Any
// reference op-_325:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// reference a_327:varName:var[a_FuncParamDef318]
// expression VarName a
// type Any
a, // reference b_329:varName:var[b_FuncParamDef321]
// expression VarName b
// type Any
b)))// scope funcDef_362
// definition distance2_FuncDef362
// type ((Any Any) -> Any)

/**
function distance2(a, b)
        = (a - b).length2;

    
*/
// scope funcDef_362
// definition distance2_FuncDef362
// type ((Any Any) -> Any)
function distance2(// definition a_FuncParamDef343
// type Any
a, // definition b_FuncParamDef346
// type Any
b)
// expression FunCall length2(op-(a,b))
// type Any
// reference length2_349:varName:var[length2_FuncDef312]
// expression VarName length2
// type Any
length2(// expression FunCall op-(a,b)
// type Any
(// expression FunCall op-(a,b)
// type Any
// reference op-_350:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// reference a_352:varName:var[a_FuncParamDef343]
// expression VarName a
// type Any
a, // reference b_354:varName:var[b_FuncParamDef346]
// expression VarName b
// type Any
b)))// scope funcDef_383
// definition normal_FuncDef383
// type ((Any) -> Any)

/**
function normal(v) 
        = v / v.length;

    
*/
// scope funcDef_383
// definition normal_FuncDef383
// type ((Any) -> Any)
function normal(// definition v_FuncParamDef368
// type Any
v)
// expression FunCall op/(v,length(v))
// type Any
// reference op/_371:varName:var[op/_FuncDef688]
// expression VarName op/
// type Any
op/(// reference v_373:varName:var[v_FuncParamDef368]
// expression VarName v
// type Any
v, // expression FunCall length(v)
// type Any
// reference length_374:varName:var[length_FuncDef294]
// expression VarName length
// type Any
length(// reference v_376:varName:var[v_FuncParamDef368]
// expression VarName v
// type Any
v))// scope funcDef_488
// definition cross_FuncDef488
// type ((Any Any) -> Any)

/**
function cross(a, b)
        = vector(a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x);

    
*/
// scope funcDef_488
// definition cross_FuncDef488
// type ((Any Any) -> Any)
function cross(// definition a_FuncParamDef389
// type Any
a, // definition b_FuncParamDef392
// type Any
b)
// expression FunCall vector(op-(op*(y(a),z(b)),op*(z(a),y(b))),op-(op*(z(a),x(b)),op*(x(a),z(b))),op-(op*(x(a),y(b)),op*(y(a),x(b))))
// type Any
// reference vector_396:varName:var[vector_FuncDef100, vector_FuncDef124, vector_FuncDef154, vector_FuncDef190]
// expression VarName vector
// type Any
vector(// expression FunCall op-(op*(y(a),z(b)),op*(z(a),y(b)))
// type Any
// reference op-_397:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression FunCall op*(y(a),z(b))
// type Any
// reference op*_398:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// expression FunCall y(a)
// type Any
// reference y_399:varName:var[y_FuncDef82, y_FuncDef142, y_FuncDef224]
// expression VarName y
// type Any
y(// reference a_401:varName:var[a_FuncParamDef389]
// expression VarName a
// type Any
a), // expression FunCall z(b)
// type Any
// reference z_404:varName:var[z_FuncDef158, z_FuncDef240]
// expression VarName z
// type Any
z(// reference b_406:varName:var[b_FuncParamDef392]
// expression VarName b
// type Any
b)), // expression FunCall op*(z(a),y(b))
// type Any
// reference op*_411:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// expression FunCall z(a)
// type Any
// reference z_412:varName:var[z_FuncDef158, z_FuncDef240]
// expression VarName z
// type Any
z(// reference a_414:varName:var[a_FuncParamDef389]
// expression VarName a
// type Any
a), // expression FunCall y(b)
// type Any
// reference y_417:varName:var[y_FuncDef82, y_FuncDef142, y_FuncDef224]
// expression VarName y
// type Any
y(// reference b_419:varName:var[b_FuncParamDef392]
// expression VarName b
// type Any
b))), // expression FunCall op-(op*(z(a),x(b)),op*(x(a),z(b)))
// type Any
// reference op-_426:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression FunCall op*(z(a),x(b))
// type Any
// reference op*_427:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// expression FunCall z(a)
// type Any
// reference z_428:varName:var[z_FuncDef158, z_FuncDef240]
// expression VarName z
// type Any
z(// reference a_430:varName:var[a_FuncParamDef389]
// expression VarName a
// type Any
a), // expression FunCall x(b)
// type Any
// reference x_433:varName:var[x_FuncDef66, x_FuncDef126, x_FuncDef208]
// expression VarName x
// type Any
x(// reference b_435:varName:var[b_FuncParamDef392]
// expression VarName b
// type Any
b)), // expression FunCall op*(x(a),z(b))
// type Any
// reference op*_440:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// expression FunCall x(a)
// type Any
// reference x_441:varName:var[x_FuncDef66, x_FuncDef126, x_FuncDef208]
// expression VarName x
// type Any
x(// reference a_443:varName:var[a_FuncParamDef389]
// expression VarName a
// type Any
a), // expression FunCall z(b)
// type Any
// reference z_446:varName:var[z_FuncDef158, z_FuncDef240]
// expression VarName z
// type Any
z(// reference b_448:varName:var[b_FuncParamDef392]
// expression VarName b
// type Any
b))), // expression FunCall op-(op*(x(a),y(b)),op*(y(a),x(b)))
// type Any
// reference op-_455:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression FunCall op*(x(a),y(b))
// type Any
// reference op*_456:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// expression FunCall x(a)
// type Any
// reference x_457:varName:var[x_FuncDef66, x_FuncDef126, x_FuncDef208]
// expression VarName x
// type Any
x(// reference a_459:varName:var[a_FuncParamDef389]
// expression VarName a
// type Any
a), // expression FunCall y(b)
// type Any
// reference y_462:varName:var[y_FuncDef82, y_FuncDef142, y_FuncDef224]
// expression VarName y
// type Any
y(// reference b_464:varName:var[b_FuncParamDef392]
// expression VarName b
// type Any
b)), // expression FunCall op*(y(a),x(b))
// type Any
// reference op*_469:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// expression FunCall y(a)
// type Any
// reference y_470:varName:var[y_FuncDef82, y_FuncDef142, y_FuncDef224]
// expression VarName y
// type Any
y(// reference a_472:varName:var[a_FuncParamDef389]
// expression VarName a
// type Any
a), // expression FunCall x(b)
// type Any
// reference x_475:varName:var[x_FuncDef66, x_FuncDef126, x_FuncDef208]
// expression VarName x
// type Any
x(// reference b_477:varName:var[b_FuncParamDef392]
// expression VarName b
// type Any
b))))// scope funcDef_525
// definition reflect_FuncDef525
// type ((Any Any) -> Any)

/**
function reflect(v, n)
        = v - (n * dot(v, n) * 2.0);

    
*/
// scope funcDef_525
// definition reflect_FuncDef525
// type ((Any Any) -> Any)
function reflect(// definition v_FuncParamDef494
// type Any
v, // definition n_FuncParamDef497
// type Any
n)
// expression FunCall op-(v,op*(op*(n,dot(v,n)),2))
// type Any
// reference op-_500:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// reference v_502:varName:var[v_FuncParamDef494]
// expression VarName v
// type Any
v, // expression FunCall op*(op*(n,dot(v,n)),2)
// type Any
(// expression FunCall op*(op*(n,dot(v,n)),2)
// type Any
// reference op*_503:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// expression FunCall op*(n,dot(v,n))
// type Any
// reference op*_504:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// reference n_506:varName:var[n_FuncParamDef497]
// expression VarName n
// type Any
n, // expression FunCall dot(v,n)
// type Any
// reference dot_508:varName:var[dot_FuncDef274]
// expression VarName dot
// type Any
dot(// reference v_510:varName:var[v_FuncParamDef494]
// expression VarName v
// type Any
v, // reference n_512:varName:var[n_FuncParamDef497]
// expression VarName n
// type Any
n)), // expression NumLiteral 2
// type Num
2.0)))// scope funcDef_564
// definition lerp_FuncDef564
// type ((Any Any Any) -> Any)

/**
function lerp(a, b, x)
        = a * (1.0 - x) + b * x;            

    
*/
// scope funcDef_564
// definition lerp_FuncDef564
// type ((Any Any Any) -> Any)
function lerp(// definition a_FuncParamDef531
// type Any
a, // definition b_FuncParamDef534
// type Any
b, // definition x_FuncParamDef537
// type Any
x)
// expression FunCall op+(op*(a,op-(1,x)),op*(b,x))
// type Any
// reference op+_540:varName:var[op+_FuncDef619]
// expression VarName op+
// type Any
op+(// expression FunCall op*(a,op-(1,x))
// type Any
// reference op*_541:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// reference a_543:varName:var[a_FuncParamDef531]
// expression VarName a
// type Any
a, // expression FunCall op-(1,x)
// type Any
(// expression FunCall op-(1,x)
// type Any
// reference op-_544:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression NumLiteral 1
// type Num
1.0, // reference x_547:varName:var[x_FuncParamDef537]
// expression VarName x
// type Any
x))), // expression FunCall op*(b,x)
// type Any
// reference op*_553:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// reference b_555:varName:var[b_FuncParamDef534]
// expression VarName b
// type Any
b, // reference x_557:varName:var[x_FuncParamDef537]
// expression VarName x
// type Any
x))// scope funcDef_603
// definition negate_FuncDef603
// type ((Any) -> Any)

/**
function negate(v)
        = vector(-v.x, -v.y, -v.z);

*/
// scope funcDef_603
// definition negate_FuncDef603
// type ((Any) -> Any)
function negate(// definition v_FuncParamDef570
// type Any
v)
// expression FunCall vector(op_negate(x(v)),op_negate(y(v)),op_negate(z(v)))
// type Any
// reference vector_574:varName:var[vector_FuncDef100, vector_FuncDef124, vector_FuncDef154, vector_FuncDef190]
// expression VarName vector
// type Any
vector(// expression FunCall op_negate(x(v))
// type Any
// reference op_negate_575:varName:var[op_negate_FuncDef996]
// expression VarName op_negate
// type Any
op_negate(// expression FunCall x(v)
// type Any
// reference x_576:varName:var[x_FuncDef66, x_FuncDef126, x_FuncDef208]
// expression VarName x
// type Any
x(// reference v_578:varName:var[v_FuncParamDef570]
// expression VarName v
// type Any
v)), // expression FunCall op_negate(y(v))
// type Any
// reference op_negate_583:varName:var[op_negate_FuncDef996]
// expression VarName op_negate
// type Any
op_negate(// expression FunCall y(v)
// type Any
// reference y_584:varName:var[y_FuncDef82, y_FuncDef142, y_FuncDef224]
// expression VarName y
// type Any
y(// reference v_586:varName:var[v_FuncParamDef570]
// expression VarName v
// type Any
v)), // expression FunCall op_negate(z(v))
// type Any
// reference op_negate_591:varName:var[op_negate_FuncDef996]
// expression VarName op_negate
// type Any
op_negate(// expression FunCall z(v)
// type Any
// reference z_592:varName:var[z_FuncDef158, z_FuncDef240]
// expression VarName z
// type Any
z(// reference v_594:varName:var[v_FuncParamDef570]
// expression VarName v
// type Any
v)))}
