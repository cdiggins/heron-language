language heron:std:0.1;

// https://referencesource.microsoft.com/#System.Numerics/System/Numerics/Matrix4x4.cs
// http://www.euclideanspace.com/maths/algebra/matrix/index.htm

module cdiggins:geometry:matrix4x4:0.1
{
    function matrix(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) = {
        M11=m11; M12=m12; M13=m13; M14=m14;       
        M21=m21; M22=m22; M23=m23; M24=m24;       
        M31=m31; M32=m32; M33=m33; M34=m34;       
        M41=m41; M42=m42; M43=m43; M44=m44;                   
    };

    function matrix_from_cols(c1, c2, c3, c4) 
        = matrix(c1[0], c2[0], c3[0], c4[0], 
                 c1[1], c2[1], c3[1], c4[1], 
                 c1[2], c2[2], c3[2], c4[2], 
                 c1[3], c2[3], c3[3], c4[3]);
    
    function matrix_from_rows(r1, r2, r3, r4) 
        = matrix(r1[0], r1[1], r1[2], r1[3], 
                 r2[0], r2[1], r2[2], r2[3], 
                 r3[0], r3[1], r3[2], r3[3], 
                 r4[0], r4[1], r4[2], r4[3]);

    var identity 
        = matrix(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);

    var matrix
        = matrix(0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0);

    function translation(m) 
        = vector(m.M41, m.M42, m.M43);

    function translation_matrix(v) 
        = matrix(1,0,0,0, 0,1,0,0, 0,0,1,0, v.x,v.y,v.z,1);

    function scaling_matrix(v) 
        = matrix(v.x,0,0,0, 0,v.y,0,0, 0,0,v.z,0, 0,0,0,1);

    function scaling_matrix(s) 
        = matrix(s,0,0,0, 0,s,0,0, 0,0,s,0, 0,0,0,1);

    function translation_scaling_matrix(t, s) 
        = matrix(s.x,0,0,0, 0,s.y,0,0, 0,0,s.z,0, t.x,t.y,t.z,1);

    function rotation_x_matrix(r) 
        = matrix(1,0,0,0, 0,cos(r),sin(r),0, 0,-sin(r),cos(r),0, 0,0,0,1);

    function rotation_y_matrix(r) 
        = matrix(cos(r),0,-sin(r),0, 0,1,0,0, sin(r),0,cos(r),0, 0,0,0,1);

    function rotation_z_matrix(r) 
        = matrix(cos(r),sin(r),0,0, -sin(r),cos(r),0,0, 0,0,1,0, 0,0,0,1);
    
    function rotation_matrix(axis, angle) {
        var x = axis.x;
        var y = axis.y;
        var z = axis.Z;      
        var sa = sin(angle);
        var ca = cos(angle);
        var xx = x * x;
        var yy = y * y;
        var zz = z * z;
        var xy = x * y; 
        var xz = x * z;
        var yz = y * z;
        return matrix(
            xx + ca * (1.0 - xx),
            xy - ca * xy + sa * z,
            xz - ca * xz - sa * y,
            0.0,
            xy - ca * xy - sa * z,
            yy + ca * (1.0 - yy),
            yz - ca * yz + sa * x,
            0.0,
            xz - ca * xz + sa * y,
            yz - ca * yz - sa * x,
            resultzz + ca * (1.0 - zz),
            0.0,
            0, 0, 0, 1);
    }

    translation_rotation_scaling_matrix(t, r, s) 
        = translation_matrix(t) * rotation_matrix(r) * scaling_matrix(s);

    transform(m, p: vector) 
        = vector(
            p.x * m.m11 + p.y * m.m21, p.z * m.m31 + m.m41,
            p.x * m.m12 + p.y * m.m22, p.z * m.m32 + m.m42,
            p.x * m.m13 + p.y * m.m23, p.z * m.m33 + m.m43);

    op*(a: matrix, b: matrix) 
        = matrix(
            a.m11 * b.m11 + a.m12 * b.m21 + a.m13 * b.m31 + a.m14 * b.m41,
            a.m11 * b.m12 + a.m12 * b.m22 + a.m13 * b.m32 + a.m14 * b.m42,
            a.m11 * b.m13 + a.m12 * b.m23 + a.m13 * b.m33 + a.m14 * b.m43,
            a.m11 * b.m14 + a.m12 * b.m24 + a.m13 * b.m34 + a.m14 * b.m44,
 
            a.m21 * b.m11 + a.m22 * b.m21 + a.m23 * b.m31 + a.m24 * b.m41,
            a.m21 * b.m12 + a.m22 * b.m22 + a.m23 * b.m32 + a.m24 * b.m42,
            a.m21 * b.m13 + a.m22 * b.m23 + a.m23 * b.m33 + a.m24 * b.m43,
            a.m21 * b.m14 + a.m22 * b.m24 + a.m23 * b.m34 + a.m24 * b.m44,
 
            a.m31 * b.m11 + a.m32 * b.m21 + a.m33 * b.m31 + a.m34 * b.m41,
            a.m31 * b.m12 + a.m32 * b.m22 + a.m33 * b.m32 + a.m34 * b.m42,
            a.m31 * b.m13 + a.m32 * b.m23 + a.m33 * b.m33 + a.m34 * b.m43,
            a.m31 * b.m14 + a.m32 * b.m24 + a.m33 * b.m34 + a.m34 * b.m44,
 
            a.m41 * b.m11 + a.m42 * b.m21 + a.m43 * b.m31 + a.m44 * b.m41,
            a.m41 * b.m12 + a.m42 * b.m22 + a.m43 * b.m32 + a.m44 * b.m42,
            a.m41 * b.m13 + a.m42 * b.m23 + a.m43 * b.m33 + a.m44 * b.m43,
            a.m41 * b.m14 + a.m42 * b.m24 + a.m43 * b.m34 + a.m44 * b.m44);

    function determinant(m)
    {
        var a = m.M11, b = m.M12, c = m.M13, d = m.M14;
        var e = m.M21, f = m.M22, g = m.M23, h = m.M24;
        var i = m.M31, j = m.M32, k = m.M33, l = m.M34;
        var m = m.M41, n = m.M42, o = m.M43, p = m.M44;

        var kp_lo = k * p - l * o;
        var jp_ln = j * p - l * n;
        var jo_kn = j * o - k * n;
        var ip_lm = i * p - l * m;
        var io_km = i * o - k * m;
        var in_jm = i * n - j * m;

        return a * (f * kp_lo - g * jp_ln + h * jo_kn) -
                b * (e * kp_lo - g * ip_lm + h * io_km) +
                c * (e * jp_ln - f * ip_lm + h * in_jm) -
                d * (e * jo_kn - f * io_km + g * in_jm);    

    function invert(m)
    {
        var a = m.M11, b = m.M12, c = m.M13, d = m.M14;
        var e = m.M21, f = m.M22, g = m.M23, h = m.M24;
        var i = m.M31, j = m.M32, k = m.M33, l = m.M34;
        var m = m.M41, n = m.M42, o = m.M43, p = m.M44;

        var kp_lo = k * p - l * o;
        var jp_ln = j * p - l * n;
        var jo_kn = j * o - k * n;
        var ip_lm = i * p - l * m;
        var io_km = i * o - k * m;
        var in_jm = i * n - j * m;

        var a11 = +(f * kp_lo - g * jp_ln + h * jo_kn);
        var a12 = -(e * kp_lo - g * ip_lm + h * io_km);
        var a13 = +(e * jp_ln - f * ip_lm + h * in_jm);
        var a14 = -(e * jo_kn - f * io_km + g * in_jm);

        var det = a * a11 + b * a12 + c * a13 + d * a14;

        var invDet = 1.0f / det;

        var gp_ho = g * p - h * o;
        var fp_hn = f * p - h * n;
        var fo_gn = f * o - g * n;
        var ep_hm = e * p - h * m;
        var eo_gm = e * o - g * m;
        var en_fm = e * n - f * m;

        var gp_ho = g * p - h * o;
        var fp_hn = f * p - h * n;
        var fo_gn = f * o - g * n;
        var ep_hm = e * p - h * m;
        var eo_gm = e * o - g * m;
        var en_fm = e * n - f * m;

        var gl_hk = g * l - h * k;
        var fl_hj = f * l - h * j;
        var fk_gj = f * k - g * j;
        var el_hi = e * l - h * i;
        var ek_gi = e * k - g * i;
        var ej_fi = e * j - f * i;

        // TODO: rewrite. Note that these are four columns. 
        // They could just be arrays. 

        var col1 = [
            a11 * invDet, 
            a12 * invDet, 
            a13 * invDet, 
            a14 * invDet];

        var col2 = [
            -(b * kp_lo - c * jp_ln + d * jo_kn) * invDet,
            +(a * kp_lo - c * ip_lm + d * io_km) * invDet,
            -(a * jp_ln - b * ip_lm + d * in_jm) * invDet,
            +(a * jo_kn - b * io_km + c * in_jm) * invDet]

        var col3 = [
            +(b * gp_ho - c * fp_hn + d * fo_gn) * invDet,
            -(a * gp_ho - c * ep_hm + d * eo_gm) * invDet,
            +(a * fp_hn - b * ep_hm + d * en_fm) * invDet,
            -(a * fo_gn - b * eo_gm + c * en_fm) * invDet];

        var col4 = [
            -(b * gl_hk - c * fl_hj + d * fk_gj) * invDet,
            +(a * gl_hk - c * el_hi + d * ek_gi) * invDet,
            -(a * fl_hj - b * el_hi + d * ej_fi) * invDet,
            +(a * fk_gj - b * ek_gi + c * ej_fi) * invDet];

        return matrix_from_cols(col1, col2, col3, col4);
    }

    matrix(q: quaternion)
    { 
        var xx = q.X * q.X;
        var yy = q.Y * q.Y;
        var zz = q.Z * q.Z;
        var xy = q.X * q.Y;
        var wz = q.Z * q.W;
        var xz = q.Z * q.X;
        var wy = q.Y * q.W;
        var yz = q.Y * q.Z;
        var wx = q.X * q.W;
        return matrix( 
            1.0f - 2.0f * (yy + zz), 2.0f * (xy + wz), 2.0f * (xz - wy), 0.0f,
            2.0f * (xy - wz), 1.0f - 2.0f * (zz + xx), 2.0f * (yz + wx), 0.0f,
            2.0f * (xz + wy), 2.0f * (yz - wx), 1.0f - 2.0f * (yy + xx), 0.0f,
            0.0f, 0.0f, 0.0f, 1.0f);
    }
 
    /* TODO: this might be a more efficient way to rotate a matrix.     
/ Compute rotation matrix.
        float x2 = rotation.X + rotation.X;
        float y2 = rotation.Y + rotation.Y;
        float z2 = rotation.Z + rotation.Z;

        float wx2 = rotation.W * x2;
        float wy2 = rotation.W * y2;
        float wz2 = rotation.W * z2;
        float xx2 = rotation.X * x2;
        float xy2 = rotation.X * y2;
        float xz2 = rotation.X * z2;
        float yy2 = rotation.Y * y2;
        float yz2 = rotation.Y * z2;
        float zz2 = rotation.Z * z2;

        float q11 = 1.0f - yy2 - zz2;
        float q21 = xy2 - wz2;
        float q31 = xz2 + wy2;

        float q12 = xy2 + wz2;
        float q22 = 1.0f - xx2 - zz2;
        float q32 = yz2 - wx2;

        float q13 = xz2 - wy2;
        float q23 = yz2 + wx2;
        float q33 = 1.0f - xx2 - yy2;

        Matrix4x4 result;

        // First row
        result.M11 = value.M11 * q11 + value.M12 * q21 + value.M13 * q31;
        result.M12 = value.M11 * q12 + value.M12 * q22 + value.M13 * q32;
        result.M13 = value.M11 * q13 + value.M12 * q23 + value.M13 * q33;
        result.M14 = value.M14;

        // Second row
        result.M21 = value.M21 * q11 + value.M22 * q21 + value.M23 * q31;
        result.M22 = value.M21 * q12 + value.M22 * q22 + value.M23 * q32;
        result.M23 = value.M21 * q13 + value.M22 * q23 + value.M23 * q33;
        result.M24 = value.M24;

        // Third row
        result.M31 = value.M31 * q11 + value.M32 * q21 + value.M33 * q31;
        result.M32 = value.M31 * q12 + value.M32 * q22 + value.M33 * q32;
        result.M33 = value.M31 * q13 + value.M32 * q23 + value.M33 * q33;
        result.M34 = value.M34;

        // Fourth row
        result.M41 = value.M41 * q11 + value.M42 * q21 + value.M43 * q31;
        result.M42 = value.M41 * q12 + value.M42 * q22 + value.M43 * q32;
        result.M43 = value.M41 * q13 + value.M42 * q23 + value.M43 * q33;
        result.M44 = value.M44;

        return result;
    } 
    */   
}
