// Generated on Wed Mar 21 2018 20:58:38 GMT-0400 (Eastern Daylight Time)
heron:std:0.1// scope module_333
heron:tests:0.1{
heron:std.array:0.1// scope funcDef_22
// definition main_FuncDef22

/**
function main() {
        simpleTest();
    }

    
*/
// scope funcDef_22
// definition main_FuncDef22
function main()
// scope compoundStatement_21
{
// expression FunCall simpleTest()
// reference simpleTest_17:varName[simpleTest_FuncDef331]
// expression VarName simpleTest
simpleTest();
}
// scope funcDef_331
// definition simpleTest_FuncDef331

/**
function simpleTest() {
        var xs = [1, 11, 3];
        print('Expect [1, 11, 3]');
        print(xs);
        print('Expect 1, 11, 3');
        for (var x in xs)
            print(x);
        print('Expect 1');            
        print(xs[0]);
        print('Expect 3');            
        print(xs.count);
        print('Expect 1');            
        print(xs.first);
        print('Expect 3');            
        print(xs.last);
        print('Expect 1');            
        print(xs.min);
        print('Expect 11');            
        print(xs.max);
        print('Expect 3');            
        print(xs.median);
        print('Expect 15');            
        print(xs.sum);
        print('Expect 5');            
        print(xs.average);
    }

*/
// scope funcDef_331
// definition simpleTest_FuncDef331
function simpleTest()
// scope compoundStatement_330
{
var // definition xs_VarDef34
xs// expression ArrayLiteral [1,11,3]
[// expression NumLiteral 1
1, // expression NumLiteral 11
11, // expression NumLiteral 3
3];
// expression FunCall print('Expect [1, 11, 3]')
// reference print_38:varName[print_FuncDef1316]
// expression VarName print
print(// expression StrLiteral 'Expect [1, 11, 3]'
'Expect [1, 11, 3]');
// expression FunCall print(xs)
// reference print_62:varName[print_FuncDef1316]
// expression VarName print
print(// reference xs_64:varName[xs_VarDef34]
// expression VarName xs
xs);
// expression FunCall print('Expect 1, 11, 3')
// reference print_69:varName[print_FuncDef1316]
// expression VarName print
print(// expression StrLiteral 'Expect 1, 11, 3'
'Expect 1, 11, 3');
// scope forLoop_101
// definition x_ForLoopVarDef101
for (x in // reference xs_92:varName[xs_VarDef34]
// expression VarName xs
xs)
// scope compoundStatement_100
{
// expression FunCall print(x)
// reference print_94:varName[print_FuncDef1316]
// expression VarName print
print(// reference x_96:varName[x_ForLoopVarDef101]
// expression VarName x
x);
}
// expression FunCall print('Expect 1')
// reference print_103:varName[print_FuncDef1316]
// expression VarName print
print(// expression StrLiteral 'Expect 1'
'Expect 1');
// expression FunCall print(op[](xs,0))
// reference print_118:varName[print_FuncDef1316]
// expression VarName print
print(// expression FunCall op[](xs,0)
// reference op[]_119:varName[op[]_FuncDef917]
// expression VarName op[]
op[](// reference xs_121:varName[xs_VarDef34]
// expression VarName xs
xs, // expression NumLiteral 0
0));
// expression FunCall print('Expect 3')
// reference print_129:varName[print_FuncDef1316]
// expression VarName print
print(// expression StrLiteral 'Expect 3'
'Expect 3');
// expression FunCall print(count(xs))
// reference print_144:varName[print_FuncDef1316]
// expression VarName print
print(// expression FunCall count(xs)
// reference count_145:varName[count_FuncDef435]
// expression VarName count
count(// reference xs_147:varName[xs_VarDef34]
// expression VarName xs
xs));
// expression FunCall print('Expect 1')
// reference print_154:varName[print_FuncDef1316]
// expression VarName print
print(// expression StrLiteral 'Expect 1'
'Expect 1');
// expression FunCall print(first(xs))
// reference print_169:varName[print_FuncDef1316]
// expression VarName print
print(// expression FunCall first(xs)
// reference first_170:varName[first_FuncDef1735]
// expression VarName first
first(// reference xs_172:varName[xs_VarDef34]
// expression VarName xs
xs));
// expression FunCall print('Expect 3')
// reference print_179:varName[print_FuncDef1316]
// expression VarName print
print(// expression StrLiteral 'Expect 3'
'Expect 3');
// expression FunCall print(last(xs))
// reference print_194:varName[print_FuncDef1316]
// expression VarName print
print(// expression FunCall last(xs)
// reference last_195:varName[last_FuncDef1720]
// expression VarName last
last(// reference xs_197:varName[xs_VarDef34]
// expression VarName xs
xs));
// expression FunCall print('Expect 1')
// reference print_204:varName[print_FuncDef1316]
// expression VarName print
print(// expression StrLiteral 'Expect 1'
'Expect 1');
// expression FunCall print(min(xs))
// reference print_219:varName[print_FuncDef1316]
// expression VarName print
print(// expression FunCall min(xs)
// reference min_220:varName[min_FuncDef78]
// expression VarName min
min(// reference xs_222:varName[xs_VarDef34]
// expression VarName xs
xs));
// expression FunCall print('Expect 11')
// reference print_229:varName[print_FuncDef1316]
// expression VarName print
print(// expression StrLiteral 'Expect 11'
'Expect 11');
// expression FunCall print(max(xs))
// reference print_245:varName[print_FuncDef1316]
// expression VarName print
print(// expression FunCall max(xs)
// reference max_246:varName[max_FuncDef103]
// expression VarName max
max(// reference xs_248:varName[xs_VarDef34]
// expression VarName xs
xs));
// expression FunCall print('Expect 3')
// reference print_255:varName[print_FuncDef1316]
// expression VarName print
print(// expression StrLiteral 'Expect 3'
'Expect 3');
// expression FunCall print(median(xs))
// reference print_270:varName[print_FuncDef1316]
// expression VarName print
print(// expression FunCall median(xs)
// reference median_271:varName[median_FuncDef1666]
// expression VarName median
median(// reference xs_273:varName[xs_VarDef34]
// expression VarName xs
xs));
// expression FunCall print('Expect 15')
// reference print_280:varName[print_FuncDef1316]
// expression VarName print
print(// expression StrLiteral 'Expect 15'
'Expect 15');
// expression FunCall print(sum(xs))
// reference print_296:varName[print_FuncDef1316]
// expression VarName print
print(// expression FunCall sum(xs)
// reference sum_297:varName[sum_FuncDef1203]
// expression VarName sum
sum(// reference xs_299:varName[xs_VarDef34]
// expression VarName xs
xs));
// expression FunCall print('Expect 5')
// reference print_306:varName[print_FuncDef1316]
// expression VarName print
print(// expression StrLiteral 'Expect 5'
'Expect 5');
// expression FunCall print(average(xs))
// reference print_321:varName[print_FuncDef1316]
// expression VarName print
print(// expression FunCall average(xs)
// reference average_322:varName[average_FuncDef1243]
// expression VarName average
average(// reference xs_324:varName[xs_VarDef34]
// expression VarName xs
xs));
}
}
