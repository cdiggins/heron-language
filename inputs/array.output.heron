// Generated on Sun Apr 01 2018 18:49:27 GMT-0400 (Eastern Daylight Time)
heron:std:0.1heron:std.array:0.1{
// definition type !'@966.(Func '@966 (Array '@966))

/**
function unit(x) 
        = [x];

    
*/
// definition type !'@966.(Func '@966 (Array '@966))
function unit(// definition type '@966
x)
// expression type !'@966.(Array '@966)
[// expression type '@966
x]// definition type !'@93!'@110.(Func (Array '@93) (Func '@93 '@110) (Array '@110))

/**
function map(xs, f)
        = array(xs.count, i => f(xs[i]));        

    
*/
// definition type !'@93!'@110.(Func (Array '@93) (Func '@93 '@110) (Array '@110))
function map(// definition type '@15
xs, // definition type '@16
f)
// expression type !'@110.(Array '@110)
// expression type !'T.(FuncSet ((Func Int (Func Int 'T) (Array 'T)) (Func (ArrayBuilder 'T) (Array 'T)) (Func Float2 (Array Float)) (Func Float3 (Array Float)) (Func Float4 (Array Float))))
array(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@15
xs), // expression type !'@110.(Func Int '@110)
(// definition type '@94
i) => // expression type '@110
// expression type '@16
f(// expression type '@93
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@93.(Array '@93)
xs, // expression type '@94
i)))// definition type !'@759!'@763.(Func (Array '@759) (Func '@759 Int '@763) (Array '@763))

/**
function mapWithIndex(xs, f)
        = array(xs.count, i => f(xs[i], i));        

    
*/
// definition type !'@759!'@763.(Func (Array '@759) (Func '@759 Int '@763) (Array '@763))
function mapWithIndex(// definition type '@756
xs, // definition type '@757
f)
// expression type !'@763.(Array '@763)
// expression type !'T.(FuncSet ((Func Int (Func Int 'T) (Array 'T)) (Func (ArrayBuilder 'T) (Array 'T)) (Func Float2 (Array Float)) (Func Float3 (Array Float)) (Func Float4 (Array Float))))
array(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@756
xs), // expression type !'@763.(Func Int '@763)
(// definition type '@760
i) => // expression type '@763
// expression type '@757
f(// expression type '@759
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@759.(Array '@759)
xs, // expression type '@760
i), // expression type Int
i))// definition type !'@752.(Func !'@751.(Array '@751) (Func Int '@752) (Array '@752))

/**
function mapIndex(xs, f)
        = array(xs.count, f);        

    
*/
// definition type !'@752.(Func !'@751.(Array '@751) (Func Int '@752) (Array '@752))
function mapIndex(// definition type '@748
xs, // definition type '@749
f)
// expression type !'@752.(Array '@752)
// expression type !'T.(FuncSet ((Func Int (Func Int 'T) (Array 'T)) (Func (ArrayBuilder 'T) (Array 'T)) (Func Float2 (Array Float)) (Func Float3 (Array Float)) (Func Float4 (Array Float))))
array(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@748
xs), // expression type '@749
f)// definition type (Func '@620 '@620 '@620)

/**
function min(x, y) 
        = x <= y ? x : y;

    
*/
// definition type (Func '@620 '@620 '@620)
function min(// definition type '@619
x, // definition type '@620
y)
// expression type '@620
// expression type Bool
// expression type !'@626.(Func '@626 '@626 Bool)
op<=(// expression type '@619
x, // expression type '@620
y) ? // expression type '@620
x// expression type '@620
y// definition type (Func '@645 '@645 '@645)

/**
function max(x, y) 
        = x <= y ? x : y;
   
    
*/
// definition type (Func '@645 '@645 '@645)
function max(// definition type '@644
x, // definition type '@645
y)
// expression type '@645
// expression type Bool
// expression type !'@626.(Func '@626 '@626 Bool)
op<=(// expression type '@644
x, // expression type '@645
y) ? // expression type '@645
x// expression type '@645
y// definition type !'@889.(Func (Array '@889) (Array '@889) (Array '@889))

/**
function shorter(xs, ys) 
        = xs.count <= ys.count ? xs : ys;
   
    
*/
// definition type !'@889.(Func (Array '@889) (Array '@889) (Array '@889))
function shorter(// definition type '@886
xs, // definition type '@887
ys)
// expression type !'@889.(Array '@889)
// expression type Bool
// expression type !'@626.(Func '@626 '@626 Bool)
op<=(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@886
xs), // expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@887
ys)) ? // expression type !'@889.(Array '@889)
xs// expression type !'@890.(Array '@890)
ys// definition type !'@574.(Func (Array '@574) (Array '@574) (Array '@574))

/**
function longer(xs, ys) 
        = xs.count >= ys.count ? xs : ys;

    
*/
// definition type !'@574.(Func (Array '@574) (Array '@574) (Array '@574))
function longer(// definition type '@571
xs, // definition type '@572
ys)
// expression type !'@574.(Array '@574)
// expression type Bool
// expression type !'@540.(Func '@540 '@540 Bool)
op>=(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@571
xs), // expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@572
ys)) ? // expression type !'@574.(Array '@574)
xs// expression type !'@575.(Array '@575)
ys// definition type (Func !'@435.(Array '@435) Bool)

/**
function empty(xs) 
        = xs.count == 0;

    
*/
// definition type (Func !'@435.(Array '@435) Bool)
function empty(// definition type '@427
xs)
// expression type Bool
// expression type !'@433.(Func '@433 '@433 Bool)
op==(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@427
xs), // expression type Int
0)// definition type !'@880.(Func (Array '@880) (Array Int) (Array '@880))

/**
function selectByIndex(xs, indices) 
        = indices.map(i => xs.at(i));

    
*/
// definition type !'@880.(Func (Array '@880) (Array Int) (Array '@880))
function selectByIndex(// definition type '@875
xs, // definition type '@876
indices)
// expression type !'@880.(Array '@880)
// expression type !'@93!'@110.(Func (Array '@93) (Func '@93 '@110) (Array '@110))
map(// expression type '@876
indices, // expression type !'@880.(Func Int '@880)
(// definition type '@878
i) => // expression type '@880
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
at(// expression type '@875
xs, // expression type '@878
i))// definition type (Func !'@135.(Array '@135) (Array Int))

/**
function indices(xs) 
        = 0 .. xs.count;

    
*/
// definition type (Func !'@135.(Array '@135) (Array Int))
function indices(// definition type '@116
xs)
// expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type Int
0, // expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@116
xs))// definition type !'@979!'@989!'@983.(Func (Array '@979) (Array '@989) (Func '@979 '@989 '@983) (Array '@983))

/**
function zip(xs, ys, f) 
        = xs.count <= ys.count 
            ? xs.mapWithIndex((x, i) => f(x, ys[i]))
            : ys.mapWithIndex((y, i) => f(xs[i], y));

    
*/
// definition type !'@979!'@989!'@983.(Func (Array '@979) (Array '@989) (Func '@979 '@989 '@983) (Array '@983))
function zip(// definition type '@972
xs, // definition type '@973
ys, // definition type '@974
f)
// expression type !'@983.(Array '@983)
// expression type Bool
// expression type !'@626.(Func '@626 '@626 Bool)
op<=(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@972
xs), // expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@973
ys)) ? // expression type !'@983.(Array '@983)
// expression type !'@759!'@763.(Func (Array '@759) (Func '@759 Int '@763) (Array '@763))
mapWithIndex(// expression type !'@976.(Array '@976)
xs, // expression type !'@979!'@983.(Func '@979 Int '@983)
(// definition type '@979
x, // definition type '@980
i) => // expression type '@983
// expression type '@974
f(// expression type '@979
x, // expression type '@977
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@977.(Array '@977)
ys, // expression type '@980
i)))// expression type !'@995.(Array '@995)
// expression type !'@759!'@763.(Func (Array '@759) (Func '@759 Int '@763) (Array '@763))
mapWithIndex(// expression type !'@977.(Array '@977)
ys, // expression type !'@989!'@995.(Func '@989 Int '@995)
(// definition type '@989
y, // definition type '@990
i) => // expression type '@995
// expression type !'@979!'@977!'@983.(Func '@979 '@977 '@983)
f(// expression type '@979
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@979.(Array '@979)
xs, // expression type '@990
i), // expression type '@989
y))// definition type !'@160.(Func (Array '@160) (Func '@160 Bool) Bool)

/**
function all(xs, p) 
        = xs.reduce(true, (prev, x) => prev && p(x));    

    
*/
// definition type !'@160.(Func (Array '@160) (Func '@160 Bool) Bool)
function all(// definition type '@156
xs, // definition type '@157
p)
// expression type Bool
// expression type !'@71!'$3.(Func (Array '$3) '@71 (Func '@71 '$3 '@71) '@71)
reduce(// expression type '@156
xs, // expression type Bool
true, // expression type !'@160.(Func Bool '@160 Bool)
(// definition type '@159
prev, // definition type '@160
x) => // expression type Bool
// expression type (Func Bool Bool Bool)
op&&(// expression type '@159
prev, // expression type '@168
// expression type '@157
p(// expression type '@160
x)))// definition type !'@180.(Func (Array '@180) (Func '@180 Bool) Bool)

/**
function any(xs, p) 
        = xs.reduce(false, (prev, x) => prev || p(x));

    
*/
// definition type !'@180.(Func (Array '@180) (Func '@180 Bool) Bool)
function any(// definition type '@176
xs, // definition type '@177
p)
// expression type Bool
// expression type !'@71!'$3.(Func (Array '$3) '@71 (Func '@71 '$3 '@71) '@71)
reduce(// expression type '@176
xs, // expression type Bool
false, // expression type !'@180.(Func Bool '@180 Bool)
(// definition type '@179
prev, // definition type '@180
x) => // expression type Bool
// expression type (Func Bool Bool Bool)
op||(// expression type '@179
prev, // expression type '@188
// expression type '@177
p(// expression type '@180
x)))// definition type (Func (Array '@79) (Func '@79 Bool) Int)

/**
function count(xs, p) 
        = xs.reduce(0, (prev, x) => p(x) ? prev + 1 : prev);    

    
*/
// definition type (Func (Array '@79) (Func '@79 Bool) Int)
function count(// definition type '@63
xs, // definition type '@64
p)
// expression type Int
// expression type !'@71!'$3.(Func (Array '$3) '@71 (Func '@71 '$3 '@71) '@71)
reduce(// expression type '@63
xs, // expression type Int
0, // expression type !'@79.(Func Int '@79 Int)
(// definition type '@78
prev, // definition type '@79
x) => // expression type Int
// expression type '@81
// expression type '@64
p(// expression type '@79
x) ? // expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type '@78
prev, // expression type Int
1)// expression type Int
prev)// definition type !'@444.(Func !'@443.(Array '@443) (Array '@444) Bool)

/**
function eq(xs, ys) 
        = xs.count == ys.count;    

    
*/
// definition type !'@444.(Func !'@443.(Array '@443) (Array '@444) Bool)
function eq(// definition type '@440
xs, // definition type '@441
ys)
// expression type Bool
// expression type !'@433.(Func '@433 '@433 Bool)
op==(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@440
xs), // expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@441
ys))// definition type !'@460.(Func (Array '@460) (Func '@460 Bool) (Array '@460))

/**
function filter(xs, p) {
        var ys = xs.mutable;
        var i = 0;
        for (var x in xs) 
            if (p(x)) 
                ys[i++] = x;
        return ys.array.take(i);
    }

    
*/
// definition type !'@460.(Func (Array '@460) (Func '@460 Bool) (Array '@460))
function filter(// definition type '@453
xs, // definition type '@454
p)
{
var // definition type !'@460.(ArrayBuilder '@460)
ys// expression type !'@460.(ArrayBuilder '@460)
// expression type !'T.(Func (Array 'T) (ArrayBuilder 'T))
mutable(// expression type '@453
xs);
var // definition type Int
i// expression type Int
0;
// definition type '$5
for (x in // expression type !'@460.(Array '@460)
xs)
// expression type '@461
// expression type '@454
p(// expression type '@460
x)// expression type !'@460.(ArrayBuilder '@460)
// expression type !'@460.(ArrayBuilder '@460)
ys = // expression type !'@460.(ArrayBuilder '@460)
// expression type !'@470.(Func (ArrayBuilder '@470) Int '@470 (ArrayBuilder '@470))
set(// expression type !'@460.(ArrayBuilder '@460)
ys, // expression type Int
// expression type Int
i++, // expression type '@460
x);
return // expression type !'@460.(Array '@460)
// expression type !'@421.(Func (Array '@421) Int (Array '@421))
take(// expression type !'@460.(Array '@460)
// expression type !'T.(FuncSet ((Func Int (Func Int 'T) (Array 'T)) (Func (ArrayBuilder 'T) (Array 'T)) (Func Float2 (Array Float)) (Func Float3 (Array Float)) (Func Float4 (Array Float))))
array(// expression type !'@460.(ArrayBuilder '@460)
ys), // expression type Int
i);
}
// definition type !'@812.(Func '@812 Int (Array '@812))

/**
function repeat(x, n) 
        = (0 .. n).map(i => x);    

    
*/
// definition type !'@812.(Func '@812 Int (Array '@812))
function repeat(// definition type '@812
x, // definition type '@813
n)
// expression type !'@812.(Array '@812)
// expression type !'@93!'@110.(Func (Array '@93) (Func '@93 '@110) (Array '@110))
map(// expression type (Array Int)
(// expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type Int
0, // expression type '@813
n)), // expression type !'@815!'@812.(Func '@815 '@812)
(// definition type '@815
i) => // expression type '@812
x)// definition type !'@827.(Func (Array '@827) (Func '@827 '@827 '@827) (Array '@827))

/**
function prefixScan(xs, op) {
        if (xs.empty) return xs;
        var ys = xs[0].repeat(xs.count).mutable;
        for (var i in 1 .. ys.count)
            ys[i] = op(xs[i], ys[i-1]);
        return ys.array;
    }

    
*/
// definition type !'@827.(Func (Array '@827) (Func '@827 '@827 '@827) (Array '@827))
function prefixScan(// definition type '@805
xs, // definition type '@806
op)
{
// expression type Bool
// expression type (Func !'@435.(Array '@435) Bool)
empty(// expression type '@805
xs)return // expression type !'@808.(Array '@808)
xs;
var // definition type !'@808.(ArrayBuilder '@808)
ys// expression type !'@808.(ArrayBuilder '@808)
// expression type !'T.(Func (Array 'T) (ArrayBuilder 'T))
mutable(// expression type !'@808.(Array '@808)
// expression type !'@812.(Func '@812 Int (Array '@812))
repeat(// expression type '@808
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@808.(Array '@808)
xs, // expression type Int
0), // expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type !'@808.(Array '@808)
xs)));
// definition type '$9
for (i in // expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type Int
1, // expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type !'@808.(ArrayBuilder '@808)
ys)))
// expression type !'@827.(ArrayBuilder '@827)
// expression type !'@808.(ArrayBuilder '@808)
ys = // expression type !'@827.(ArrayBuilder '@827)
// expression type !'@470.(Func (ArrayBuilder '@470) Int '@470 (ArrayBuilder '@470))
set(// expression type !'@808.(ArrayBuilder '@808)
ys, // expression type Int
i, // expression type '@827
// expression type '@806
op(// expression type '@808
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@808.(Array '@808)
xs, // expression type Int
i), // expression type '@808
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@808.(ArrayBuilder '@808)
ys, // expression type Int
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type Int
i, // expression type Int
1))));
return // expression type !'@827.(Array '@827)
// expression type !'T.(FuncSet ((Func Int (Func Int 'T) (Array 'T)) (Func (ArrayBuilder 'T) (Array 'T)) (Func Float2 (Array Float)) (Func Float3 (Array Float)) (Func Float4 (Array Float))))
array(// expression type !'@827.(ArrayBuilder '@827)
ys);
}
// definition type !'@136.(Func (Array '@136) (Array '@136))

/**
function adjacentDifferences(xs) 
        = xs.indices.map(i => i > 0 ? xs[i] - xs[i-1] : xs[i]);
    
    
*/
// definition type !'@136.(Func (Array '@136) (Array '@136))
function adjacentDifferences(// definition type '@10
xs)
// expression type !'@136.(Array '@136)
// expression type !'@93!'@110.(Func (Array '@93) (Func '@93 '@110) (Array '@110))
map(// expression type (Array Int)
// expression type (Func !'@135.(Array '@135) (Array Int))
indices(// expression type '@10
xs), // expression type !'@136.(Func Int '@136)
(// definition type '@137
i) => // expression type '@136
// expression type Bool
// expression type !'@143.(Func '@143 '@143 Bool)
op>(// expression type '@137
i, // expression type Int
0) ? // expression type '@136
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type '@136
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@136.(Array '@136)
xs, // expression type Int
i), // expression type '@136
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@136.(Array '@136)
xs, // expression type Int
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type Int
i, // expression type Int
1)))// expression type '@136
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@136.(Array '@136)
xs, // expression type Int
i))// definition type !'@418.(Func (Array '@418) Int Int (Array '@418))

/**
function slice(xs, from, to) 
        = (from .. to).map(i => xs.at(i));    

    
*/
// definition type !'@418.(Func (Array '@418) Int Int (Array '@418))
function slice(// definition type '@412
xs, // definition type '@413
from, // definition type '@414
to)
// expression type !'@418.(Array '@418)
// expression type !'@93!'@110.(Func (Array '@93) (Func '@93 '@110) (Array '@110))
map(// expression type (Array Int)
(// expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type '@413
from, // expression type '@414
to)), // expression type !'@418.(Func Int '@418)
(// definition type '@416
i) => // expression type '@418
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
at(// expression type '@412
xs, // expression type '@416
i))// definition type !'@942.(Func (Array '@942) Int (Array '@942))

/**
function stride(xs, n) 
        = (0 .. xs.count / n).map(i => xs[i * n]);    

    
*/
// definition type !'@942.(Func (Array '@942) Int (Array '@942))
function stride(// definition type '@939
xs, // definition type '@940
n)
// expression type !'@942.(Array '@942)
// expression type !'@93!'@110.(Func (Array '@93) (Func '@93 '@110) (Array '@110))
map(// expression type (Array Int)
(// expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type Int
0, // expression type Int
// expression type !'@223.(Func '@223 '@223 '@223)
op/(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@939
xs), // expression type '@940
n))), // expression type !'@942.(Func Int '@942)
(// definition type '@944
i) => // expression type '@942
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@942.(Array '@942)
xs, // expression type Int
// expression type !'@329.(Func '@329 '@329 '@329)
op*(// expression type '@944
i, // expression type Int
n)))// definition type !'@920.(Func (Array '@920) Int (Array (Array '@920)))

/**
function slices(xs, n) 
        = (0 .. n).map(i => xs.slice(i * n, (i+1) * n));    

    
*/
// definition type !'@920.(Func (Array '@920) Int (Array (Array '@920)))
function slices(// definition type '@912
xs, // definition type '@913
n)
// expression type (Array !'@920.(Array '@920))
// expression type !'@93!'@110.(Func (Array '@93) (Func '@93 '@110) (Array '@110))
map(// expression type (Array Int)
(// expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type Int
0, // expression type '@913
n)), // expression type !'@920.(Func Int (Array '@920))
(// definition type '@915
i) => // expression type !'@920.(Array '@920)
// expression type !'@418.(Func (Array '@418) Int Int (Array '@418))
slice(// expression type '@912
xs, // expression type Int
// expression type !'@329.(Func '@329 '@329 '@329)
op*(// expression type '@915
i, // expression type Int
n), // expression type Int
// expression type !'@329.(Func '@329 '@329 '@329)
op*(// expression type Int
(// expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type Int
i, // expression type Int
1)), // expression type Int
n)))// definition type !'@421.(Func (Array '@421) Int (Array '@421))

/**
function take(xs, n) 
        = xs.slice(0, n);    

    
*/
// definition type !'@421.(Func (Array '@421) Int (Array '@421))
function take(// definition type '@405
xs, // definition type '@406
n)
// expression type !'@421.(Array '@421)
// expression type !'@418.(Func (Array '@418) Int Int (Array '@418))
slice(// expression type '@405
xs, // expression type Int
0, // expression type '@406
n)// definition type !'@908.(Func !'@906.(Array '@906) Int (Array '@908))

/**
function skip(xs, n) 
        = xs.slice(n, xs.count - n);    

    
*/
// definition type !'@908.(Func !'@906.(Array '@906) Int (Array '@908))
function skip(// definition type '@903
xs, // definition type '@904
n)
// expression type !'@908.(Array '@908)
// expression type !'@418.(Func (Array '@418) Int Int (Array '@418))
slice(// expression type '@903
xs, // expression type '@904
n, // expression type Int
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@903
xs), // expression type '@904
n))// definition type !'@424.(Func !'@422.(Array '@422) Int (Array '@424))

/**
function dropSuffix(xs, n) 
        = xs.take(xs.count - n);    

    
*/
// definition type !'@424.(Func !'@422.(Array '@422) Int (Array '@424))
function dropSuffix(// definition type '@399
xs, // definition type '@400
n)
// expression type !'@424.(Array '@424)
// expression type !'@421.(Func (Array '@421) Int (Array '@421))
take(// expression type '@399
xs, // expression type Int
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@399
xs), // expression type '@400
n))// definition type !'@959.(Func !'@956.(Array '@956) Int (Array '@959))

/**
function suffix(xs, n) 
        = xs.skip(xs.count-n);

    
*/
// definition type !'@959.(Func !'@956.(Array '@956) Int (Array '@959))
function suffix(// definition type '@953
xs, // definition type '@954
n)
// expression type !'@959.(Array '@959)
// expression type !'@908.(Func !'@906.(Array '@906) Int (Array '@908))
skip(// expression type '@953
xs, // expression type Int
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@953
xs), // expression type '@954
n))// definition type !'@857!'@859.(Func (Array '@859) '@857 (Array '@859))

/**
function reverse(xs, n) 
        = xs.indices.map(i => xs[xs.count-1-i]);    

    
*/
// definition type !'@857!'@859.(Func (Array '@859) '@857 (Array '@859))
function reverse(// definition type '@856
xs, // definition type '@857
n)
// expression type !'@859.(Array '@859)
// expression type !'@93!'@110.(Func (Array '@93) (Func '@93 '@110) (Array '@110))
map(// expression type (Array Int)
// expression type (Func !'@135.(Array '@135) (Array Int))
indices(// expression type '@856
xs), // expression type !'@859.(Func Int '@859)
(// definition type '@860
i) => // expression type '@859
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@859.(Array '@859)
xs, // expression type Int
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type Int
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type !'@859.(Array '@859)
xs), // expression type Int
1), // expression type '@860
i)))// definition type !'@258.(Func Int (Func Int '@258) (Array '@258))

/**
function gen(cnt, f) 
        = (0 .. cnt).map(f);    

    
*/
// definition type !'@258.(Func Int (Func Int '@258) (Array '@258))
function gen(// definition type '@254
cnt, // definition type '@255
f)
// expression type !'@258.(Array '@258)
// expression type !'@93!'@110.(Func (Array '@93) (Func '@93 '@110) (Array '@110))
map(// expression type (Array Int)
(// expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type Int
0, // expression type '@254
cnt)), // expression type '@255
f)// definition type !'@259.(Func (Array '@259) (Array '@259) (Array '@259))

/**
function concat(xs, ys) 
        = gen(xs.count + ys.count, i => i < xs.count ? xs[i] : ys[i - xs.count]);    

    
*/
// definition type !'@259.(Func (Array '@259) (Array '@259) (Array '@259))
function concat(// definition type '@248
xs, // definition type '@249
ys)
// expression type !'@259.(Array '@259)
// expression type !'@258.(Func Int (Func Int '@258) (Array '@258))
gen(// expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@248
xs), // expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@249
ys)), // expression type !'@259.(Func Int '@259)
(// definition type '@262
i) => // expression type '@259
// expression type Bool
// expression type !'@268.(Func '@268 '@268 Bool)
op<(// expression type '@262
i, // expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type !'@259.(Array '@259)
xs)) ? // expression type '@259
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@259.(Array '@259)
xs, // expression type Int
i)// expression type '@260
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@260.(Array '@260)
ys, // expression type Int
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type Int
i, // expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type !'@259.(Array '@259)
xs))))// definition type !'@348.(Func (Array '@348) Int Int (Array '@348))

/**
function cut(xs, from, n) 
        = gen(xs.count - n, i => i < from ? xs[i] : xs[i + n]);    

    
*/
// definition type !'@348.(Func (Array '@348) Int Int (Array '@348))
function cut(// definition type '@344
xs, // definition type '@345
from, // definition type '@346
n)
// expression type !'@348.(Array '@348)
// expression type !'@258.(Func Int (Func Int '@258) (Array '@258))
gen(// expression type Int
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@344
xs), // expression type '@346
n), // expression type !'@348.(Func Int '@348)
(// definition type '@350
i) => // expression type '@348
// expression type Bool
// expression type !'@268.(Func '@268 '@268 Bool)
op<(// expression type '@350
i, // expression type '@345
from) ? // expression type '@348
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@348.(Array '@348)
xs, // expression type '@345
i)// expression type '@348
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@348.(Array '@348)
xs, // expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type Int
i, // expression type Int
n)))// definition type !'@934.(Func (Array '@934) Int (Array '@934) (Array '@934))

/**
function splice(xs, from, ys) 
        = xs.take(from).concat(ys).concat(xs.skip(from));    

    
*/
// definition type !'@934.(Func (Array '@934) Int (Array '@934) (Array '@934))
function splice(// definition type '@927
xs, // definition type '@928
from, // definition type '@929
ys)
// expression type !'@934.(Array '@934)
// expression type !'@259.(Func (Array '@259) (Array '@259) (Array '@259))
concat(// expression type !'@931.(Array '@931)
// expression type !'@259.(Func (Array '@259) (Array '@259) (Array '@259))
concat(// expression type !'@931.(Array '@931)
// expression type !'@421.(Func (Array '@421) Int (Array '@421))
take(// expression type '@927
xs, // expression type '@928
from), // expression type '@929
ys), // expression type !'@934.(Array '@934)
// expression type !'@908.(Func !'@906.(Array '@906) Int (Array '@908))
skip(// expression type !'@931.(Array '@931)
xs, // expression type Int
from))// definition type (Func (Array Int) Int)

/**
function sum(xs) 
        = xs.reduce(0, op+);    

    
*/
// definition type (Func (Array Int) Int)
function sum(// definition type '@227
xs)
// expression type Int
// expression type !'@71!'$3.(Func (Array '$3) '@71 (Func '@71 '$3 '@71) '@71)
reduce(// expression type '@227
xs, // expression type Int
0, // expression type !'@88.(Func '@88 '@88 '@88)
op+)// definition type (Func (Array Int) Int)

/**
function product(xs) 
        = xs.reduce(1, op*);    
    
    
*/
// definition type (Func (Array Int) Int)
function product(// definition type '@834
xs)
// expression type Int
// expression type !'@71!'$3.(Func (Array '$3) '@71 (Func '@71 '$3 '@71) '@71)
reduce(// expression type '@834
xs, // expression type Int
1, // expression type !'@329.(Func '@329 '@329 '@329)
op*)// definition type (Func (Array Int) Int)

/**
function average(xs) 
        = xs.sum / xs.count;    

    
*/
// definition type (Func (Array Int) Int)
function average(// definition type '@217
xs)
// expression type Int
// expression type !'@223.(Func '@223 '@223 '@223)
op/(// expression type Int
// expression type (Func (Array Int) Int)
sum(// expression type '@217
xs), // expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type (Array Int)
xs))// definition type (Func (Array '@620) '@620)

/**
function min(xs) 
        = xs.reduce(xs[0], min);    

    
*/
// definition type (Func (Array '@620) '@620)
function min(// definition type '@631
xs)
// expression type '@620
// expression type !'@71!'$3.(Func (Array '$3) '@71 (Func '@71 '$3 '@71) '@71)
reduce(// expression type '@631
xs, // expression type '@633
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type '@631
xs, // expression type Int
0), // expression type !'@620.(FuncSet !'@630.((Func '@620 '@620 '@620) !'@629.(Func '@629 '@630)))
min)// definition type (Func (Array '@645) '@645)

/**
function max(xs) 
        = xs.reduce(xs[0], max);

    
*/
// definition type (Func (Array '@645) '@645)
function max(// definition type '@650
xs)
// expression type '@645
// expression type !'@71!'$3.(Func (Array '$3) '@71 (Func '@71 '$3 '@71) '@71)
reduce(// expression type '@650
xs, // expression type '@652
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type '@650
xs, // expression type Int
0), // expression type !'@645.(FuncSet !'@649.((Func '@645 '@645 '@645) !'@648.(Func '@648 '@649)))
max)// definition type !'@686.(Func (ArrayBuilder '@686) Int Int (ArrayBuilder '@686))

/**
function partition(a, lo, hi) {
        var pivot = a[lo];
        var i = lo-1;
        var j = hi+1;
        while (true) {
            do { i++; } while (a[i] < pivot);
            do { j--; } while (a[j] > pivot);
            if (i >= j) return a;
            var tmp = a[i];
            a[i] = a[j];
            a[j] = tmp;
        }
        return a;
    }

    
*/
// definition type !'@686.(Func (ArrayBuilder '@686) Int Int (ArrayBuilder '@686))
function partition(// definition type '@682
a, // definition type '@683
lo, // definition type '@684
hi)
{
var // definition type '@686
pivot// expression type '@686
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type '@682
a, // expression type '@683
lo);
var // definition type Int
i// expression type Int
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type Int
lo, // expression type Int
1);
var // definition type Int
j// expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type '@684
hi, // expression type Int
1);
while (// expression type Bool
true)
// expression type Bool
true{
do
{
// expression type Int
// expression type Int
i++;
}
// expression type Bool
// expression type !'@268.(Func '@268 '@268 Bool)
op<(// expression type '@686
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@686.(Array '@686)
a, // expression type Int
i), // expression type '@686
pivot);
do
{
// expression type Int
// expression type Int
j--;
}
// expression type Bool
// expression type !'@143.(Func '@143 '@143 Bool)
op>(// expression type '@686
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@686.(Array '@686)
a, // expression type Int
j), // expression type '@686
pivot);
// expression type Bool
// expression type !'@540.(Func '@540 '@540 Bool)
op>=(// expression type Int
i, // expression type Int
j)return // expression type !'@686.(Array '@686)
a;
var // definition type '@686
tmp// expression type '@686
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@686.(Array '@686)
a, // expression type Int
i);
// expression type !'@686.(ArrayBuilder '@686)
// expression type !'@686.(Array '@686)
a = // expression type !'@686.(ArrayBuilder '@686)
// expression type !'@470.(Func (ArrayBuilder '@470) Int '@470 (ArrayBuilder '@470))
set(// expression type !'@686.(Array '@686)
a, // expression type Int
i, // expression type '@686
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@686.(Array '@686)
a, // expression type Int
j));
// expression type !'@686.(ArrayBuilder '@686)
// expression type !'@686.(ArrayBuilder '@686)
a = // expression type !'@686.(ArrayBuilder '@686)
// expression type !'@470.(Func (ArrayBuilder '@470) Int '@470 (ArrayBuilder '@470))
set(// expression type !'@686.(ArrayBuilder '@686)
a, // expression type Int
j, // expression type '@686
tmp);
}
{
do
{
// expression type Int
// expression type Int
i++;
}
// expression type Bool
// expression type !'@268.(Func '@268 '@268 Bool)
op<(// expression type '@686
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@686.(Array '@686)
a, // expression type Int
i), // expression type '@686
pivot);
do
{
// expression type Int
// expression type Int
j--;
}
// expression type Bool
// expression type !'@143.(Func '@143 '@143 Bool)
op>(// expression type '@686
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@686.(Array '@686)
a, // expression type Int
j), // expression type '@686
pivot);
// expression type Bool
// expression type !'@540.(Func '@540 '@540 Bool)
op>=(// expression type Int
i, // expression type Int
j)return // expression type !'@686.(Array '@686)
a;
var // definition type '@686
tmp// expression type '@686
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@686.(Array '@686)
a, // expression type Int
i);
// expression type !'@686.(ArrayBuilder '@686)
// expression type !'@686.(Array '@686)
a = // expression type !'@686.(ArrayBuilder '@686)
// expression type !'@470.(Func (ArrayBuilder '@470) Int '@470 (ArrayBuilder '@470))
set(// expression type !'@686.(Array '@686)
a, // expression type Int
i, // expression type '@686
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@686.(Array '@686)
a, // expression type Int
j));
// expression type !'@686.(ArrayBuilder '@686)
// expression type !'@686.(ArrayBuilder '@686)
a = // expression type !'@686.(ArrayBuilder '@686)
// expression type !'@470.(Func (ArrayBuilder '@470) Int '@470 (ArrayBuilder '@470))
set(// expression type !'@686.(ArrayBuilder '@686)
a, // expression type Int
j, // expression type '@686
tmp);
}
return // expression type !'@686.(ArrayBuilder '@686)
a;
}
// definition type (Func (ArrayBuilder Int) Int Int (ArrayBuilder Int))

/**
function qsort(a, lo, hi) {
        if (lo < hi) {
            var p = a[lo]; 
            a = partition(a, lo, hi);
            a = qsort(a, lo, p);
            a = qsort(a, p+1, hi);
        }
        return a;
    }

    
*/
// definition type (Func (ArrayBuilder Int) Int Int (ArrayBuilder Int))
function qsort(// definition type '@672
a, // definition type '@673
lo, // definition type '@674
hi)
{
// expression type Bool
// expression type !'@268.(Func '@268 '@268 Bool)
op<(// expression type '@673
lo, // expression type '@674
hi){
var // definition type '@677
p// expression type '@677
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type '@672
a, // expression type '@674
lo);
// expression type !'@677.(ArrayBuilder '@677)
// expression type undefined
a = // expression type !'@677.(ArrayBuilder '@677)
// expression type !'@686.(Func (ArrayBuilder '@686) Int Int (ArrayBuilder '@686))
partition(// expression type !'@677.(Array '@677)
a, // expression type Int
lo, // expression type Int
hi);
// expression type !'@677.(ArrayBuilder '@677)
// expression type undefined
a = // expression type '@702
// expression type !'@668!'@669!'@670!'@671.(Func '@668 '@669 '@670 '@671)
qsort(// expression type !'@677.(ArrayBuilder '@677)
a, // expression type Int
lo, // expression type '@677
p);
// expression type (ArrayBuilder Int)
// expression type undefined
a = // expression type '@707
// expression type !'@668!'@669!'@670!'@671.(Func '@668 '@669 '@670 '@671)
qsort(// expression type !'@677.(ArrayBuilder '@677)
a, // expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type '@677
p, // expression type Int
1), // expression type Int
hi);
}
return // expression type (ArrayBuilder Int)
a;
}
// definition type (Func (Array Int) (Array Int))

/**
function sort(xs) 
        = xs.mutable.qsort(0, xs.count-1).array;    

    
*/
// definition type (Func (Array Int) (Array Int))
function sort(// definition type '@666
xs)
// expression type (Array Int)
// expression type !'T.(FuncSet ((Func Int (Func Int 'T) (Array 'T)) (Func (ArrayBuilder 'T) (Array 'T)) (Func Float2 (Array Float)) (Func Float3 (Array Float)) (Func Float4 (Array Float))))
array(// expression type (ArrayBuilder Int)
// expression type (Func (ArrayBuilder Int) Int Int (ArrayBuilder Int))
qsort(// expression type !'@708.(ArrayBuilder '@708)
// expression type !'T.(Func (Array 'T) (ArrayBuilder 'T))
mutable(// expression type '@666
xs), // expression type Int
0, // expression type Int
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type !'@708.(Array '@708)
xs), // expression type Int
1)))// definition type (Func (Array Int) Int)

/**
function median(xs) {        
        var ys = xs.sort;
        return ys.count % 2 == 0 
            ? ys[ys.count / 2] 
            : ys[ys.count / 2 - 1] + ys[ys.count / 2 + 1] / 2;
    }

    
*/
// definition type (Func (Array Int) Int)
function median(// definition type '@662
xs)
{
var // definition type (Array Int)
ys// expression type (Array Int)
// expression type (Func (Array Int) (Array Int))
sort(// expression type '@662
xs);
return // expression type Int
// expression type Bool
// expression type !'@433.(Func '@433 '@433 Bool)
op==(// expression type Int
// expression type !'@716.(Func '@716 '@716 '@716)
op%(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type (Array Int)
ys), // expression type Int
2), // expression type Int
0) ? // expression type Int
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type (Array Int)
ys, // expression type Int
// expression type !'@223.(Func '@223 '@223 '@223)
op/(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type (Array Int)
ys), // expression type Int
2))// expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type Int
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type (Array Int)
ys, // expression type Int
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type Int
// expression type !'@223.(Func '@223 '@223 '@223)
op/(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type (Array Int)
ys), // expression type Int
2), // expression type Int
1)), // expression type Int
// expression type !'@223.(Func '@223 '@223 '@223)
op/(// expression type Int
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type (Array Int)
ys, // expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type Int
// expression type !'@223.(Func '@223 '@223 '@223)
op/(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type (Array Int)
ys), // expression type Int
2), // expression type Int
1)), // expression type Int
2));
}
// definition type (Func !'@543.(Array '@543) Int Bool)

/**
function inRange(xs, n) 
        = n >= 0 && n < xs.count;    

    
*/
// definition type (Func !'@543.(Array '@543) Int Bool)
function inRange(// definition type '@533
xs, // definition type '@534
n)
// expression type Bool
// expression type (Func Bool Bool Bool)
op&&(// expression type Bool
// expression type !'@540.(Func '@540 '@540 Bool)
op>=(// expression type '@534
n, // expression type Int
0), // expression type Bool
// expression type !'@268.(Func '@268 '@268 Bool)
op<(// expression type Int
n, // expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@533
xs)))// definition type !'@551.(Func !'@549.(Array '@549) '@551)

/**
function last(xs) 
        = xs[xs.count - 1];    

    
*/
// definition type !'@551.(Func !'@549.(Array '@549) '@551)
function last(// definition type '@547
xs)
// expression type '@551
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type '@547
xs, // expression type Int
// expression type !'@128.(Func '@128 '@128 '@128)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 Bool) Int)))
count(// expression type '@547
xs), // expression type Int
1))// definition type !'@479.(Func !'@479.(Array '@479) '@479)

/**
function first(xs) 
        = xs[0];

    
*/
// definition type !'@479.(Func !'@479.(Array '@479) '@479)
function first(// definition type '@477
xs)
// expression type '@479
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type '@477
xs, // expression type Int
0)// definition type !'@71!'$3.(Func (Array '$3) '@71 (Func '@71 '$3 '@71) '@71)

/**
function reduce(xs, acc, f) {
        for (var x in xs)
            acc = f(acc, x);
        return acc;
    }

    
*/
// definition type !'@71!'$3.(Func (Array '$3) '@71 (Func '@71 '$3 '@71) '@71)
function reduce(// definition type '@70
xs, // definition type '@71
acc, // definition type '@72
f)
{
// definition type '$3
for (x in // expression type '@70
xs)
// expression type '@71
// expression type undefined
acc = // expression type '@74
// expression type '@72
f(// expression type '@71
acc, // expression type '$3
x);
return // expression type '@71
acc;
}
// definition type !'$6.(Func (Array !'@259.(Array '@259)) (Array '$6))

/**
function flatten(xs)
        = xs.reduce([], concat);

    
*/
// definition type !'$6.(Func (Array !'@259.(Array '@259)) (Array '$6))
function flatten(// definition type '@488
xs)
// expression type !'$6.(Array '$6)
// expression type !'@71!'$3.(Func (Array '$3) '@71 (Func '@71 '$3 '@71) '@71)
reduce(// expression type '@488
xs, // expression type !'$6.(Array '$6)
[], // expression type !'@259.(Func (Array '@259) (Array '@259) (Array '@259))
concat)// definition type !'@492!'@495.(Func (Array '@492) !'@494.(Func '@492 (Array '@494)) (Array '@495))

/**
function flatMap(xs, f)       
        = xs.map(f).flatten;

*/
// definition type !'@492!'@495.(Func (Array '@492) !'@494.(Func '@492 (Array '@494)) (Array '@495))
function flatMap(// definition type '@483
xs, // definition type '@484
f)
// expression type !'@495.(Array '@495)
// expression type !'$6.(Func (Array !'@259.(Array '@259)) (Array '$6))
flatten(// expression type !'@493.(Array '@493)
// expression type !'@93!'@110.(Func (Array '@93) (Func '@93 '@110) (Array '@110))
map(// expression type '@483
xs, // expression type '@484
f))}
