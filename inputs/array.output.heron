// Generated on Sun Apr 01 2018 18:40:49 GMT-0400 (Eastern Daylight Time)
heron:std:0.1heron:std.array:0.1{
// definition type !'@995.(Func '@995 (Array '@995))

/**
function unit(x) 
        = [x];

    
*/
// definition type !'@995.(Func '@995 (Array '@995))
function unit(// definition type '@995
x)
// expression type !'@995.(Array '@995)
[// expression type '@995
x]// definition type !'@94!'@113.(Func (Array '@94) !'@111.(Func '@94 '@111) (Array '@113))

/**
function map(xs, f)
        = array(xs.count, i => f(xs[i]));        

    
*/
// definition type !'@94!'@113.(Func (Array '@94) !'@111.(Func '@94 '@111) (Array '@113))
function map(// definition type '@15
xs, // definition type '@16
f)
// expression type !'@113.(Array '@113)
// expression type !'T.(FuncSet ((Func Int (Func Int 'T) (Array 'T)) (Func (ArrayBuilder 'T) (Array 'T)) (Func Float2 (Array Float)) (Func Float3 (Array Float)) (Func Float4 (Array Float))))
array(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@15
xs), // expression type !'@113.(Func Int '@113)
(// definition type '@95
i) => // expression type '@113
// expression type '@16
f(// expression type '@94
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@94.(Array '@94)
xs, // expression type '@95
i)))// definition type !'@775!'@779!'@781.(Func (Array '@775) (Func '@775 Int '@779) (Array '@781))

/**
function mapWithIndex(xs, f)
        = array(xs.count, i => f(xs[i], i));        

    
*/
// definition type !'@775!'@779!'@781.(Func (Array '@775) (Func '@775 Int '@779) (Array '@781))
function mapWithIndex(// definition type '@772
xs, // definition type '@773
f)
// expression type !'@781.(Array '@781)
// expression type !'T.(FuncSet ((Func Int (Func Int 'T) (Array 'T)) (Func (ArrayBuilder 'T) (Array 'T)) (Func Float2 (Array Float)) (Func Float3 (Array Float)) (Func Float4 (Array Float))))
array(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@772
xs), // expression type !'@781.(Func Int '@781)
(// definition type '@776
i) => // expression type '@781
// expression type '@773
f(// expression type '@775
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@775.(Array '@775)
xs, // expression type '@776
i), // expression type Int
i))// definition type !'@768.(Func !'@767.(Array '@767) (Func Int '@768) (Array '@768))

/**
function mapIndex(xs, f)
        = array(xs.count, f);        

    
*/
// definition type !'@768.(Func !'@767.(Array '@767) (Func Int '@768) (Array '@768))
function mapIndex(// definition type '@764
xs, // definition type '@765
f)
// expression type !'@768.(Array '@768)
// expression type !'T.(FuncSet ((Func Int (Func Int 'T) (Array 'T)) (Func (ArrayBuilder 'T) (Array 'T)) (Func Float2 (Array Float)) (Func Float3 (Array Float)) (Func Float4 (Array Float))))
array(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@764
xs), // expression type '@765
f)// definition type (Func '@634 '@634 '@634)

/**
function min(x, y) 
        = x <= y ? x : y;

    
*/
// definition type (Func '@634 '@634 '@634)
function min(// definition type '@633
x, // definition type '@634
y)
// expression type '@634
// expression type Bool
// expression type !'@640.(Func '@640 '@640 Bool)
op<=(// expression type '@633
x, // expression type '@634
y) ? // expression type '@634
x// expression type '@634
y// definition type (Func '@660 '@660 '@660)

/**
function max(x, y) 
        = x <= y ? x : y;
   
    
*/
// definition type (Func '@660 '@660 '@660)
function max(// definition type '@659
x, // definition type '@660
y)
// expression type '@660
// expression type Bool
// expression type !'@640.(Func '@640 '@640 Bool)
op<=(// expression type '@659
x, // expression type '@660
y) ? // expression type '@660
x// expression type '@660
y// definition type !'@911.(Func (Array '@911) (Array '@911) (Array '@911))

/**
function shorter(xs, ys) 
        = xs.count <= ys.count ? xs : ys;
   
    
*/
// definition type !'@911.(Func (Array '@911) (Array '@911) (Array '@911))
function shorter(// definition type '@908
xs, // definition type '@909
ys)
// expression type !'@911.(Array '@911)
// expression type Bool
// expression type !'@640.(Func '@640 '@640 Bool)
op<=(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@908
xs), // expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@909
ys)) ? // expression type !'@911.(Array '@911)
xs// expression type !'@912.(Array '@912)
ys// definition type !'@588.(Func (Array '@588) (Array '@588) (Array '@588))

/**
function longer(xs, ys) 
        = xs.count >= ys.count ? xs : ys;

    
*/
// definition type !'@588.(Func (Array '@588) (Array '@588) (Array '@588))
function longer(// definition type '@585
xs, // definition type '@586
ys)
// expression type !'@588.(Array '@588)
// expression type Bool
// expression type !'@554.(Func '@554 '@554 Bool)
op>=(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@585
xs), // expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@586
ys)) ? // expression type !'@588.(Array '@588)
xs// expression type !'@589.(Array '@589)
ys// definition type (Func !'@446.(Array '@446) Bool)

/**
function empty(xs) 
        = xs.count == 0;

    
*/
// definition type (Func !'@446.(Array '@446) Bool)
function empty(// definition type '@438
xs)
// expression type Bool
// expression type !'@444.(Func '@444 '@444 Bool)
op==(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@438
xs), // expression type Int
0)// definition type !'@904.(Func !'@901.(Array '@901) (Array Int) (Array '@904))

/**
function selectByIndex(xs, indices) 
        = indices.map(i => xs.at(i));

    
*/
// definition type !'@904.(Func !'@901.(Array '@901) (Array Int) (Array '@904))
function selectByIndex(// definition type '@896
xs, // definition type '@897
indices)
// expression type !'@904.(Array '@904)
// expression type !'@94!'@113.(Func (Array '@94) !'@111.(Func '@94 '@111) (Array '@113))
map(// expression type '@897
indices, // expression type !'@901.(Func Int '@901)
(// definition type '@899
i) => // expression type '@901
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
at(// expression type '@896
xs, // expression type '@899
i))// definition type (Func !'@136.(Array '@136) (Array Int))

/**
function indices(xs) 
        = 0 .. xs.count;

    
*/
// definition type (Func !'@136.(Array '@136) (Array Int))
function indices(// definition type '@117
xs)
// expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type Int
0, // expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@117
xs))// definition type !'@1008!'@1019!'@1018.(Func (Array '@1008) (Array '@1019) !'@1012.(Func '@1008 '@1019 '@1012) (Array '@1018))

/**
function zip(xs, ys, f) 
        = xs.count <= ys.count 
            ? xs.mapWithIndex((x, i) => f(x, ys[i]))
            : ys.mapWithIndex((y, i) => f(xs[i], y));

    
*/
// definition type !'@1008!'@1019!'@1018.(Func (Array '@1008) (Array '@1019) !'@1012.(Func '@1008 '@1019 '@1012) (Array '@1018))
function zip(// definition type '@1001
xs, // definition type '@1002
ys, // definition type '@1003
f)
// expression type !'@1018.(Array '@1018)
// expression type Bool
// expression type !'@640.(Func '@640 '@640 Bool)
op<=(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@1001
xs), // expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@1002
ys)) ? // expression type !'@1018.(Array '@1018)
// expression type !'@775!'@779!'@781.(Func (Array '@775) (Func '@775 Int '@779) (Array '@781))
mapWithIndex(// expression type !'@1005.(Array '@1005)
xs, // expression type !'@1008!'@1015.(Func '@1008 Int '@1015)
(// definition type '@1008
x, // definition type '@1009
i) => // expression type '@1015
// expression type '@1003
f(// expression type '@1008
x, // expression type '@1006
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@1006.(Array '@1006)
ys, // expression type '@1009
i)))// expression type !'@1028.(Array '@1028)
// expression type !'@775!'@779!'@781.(Func (Array '@775) (Func '@775 Int '@779) (Array '@781))
mapWithIndex(// expression type !'@1006.(Array '@1006)
ys, // expression type !'@1019!'@1025.(Func '@1019 Int '@1025)
(// definition type '@1019
y, // definition type '@1020
i) => // expression type '@1025
// expression type !'@1008!'@1006!'@1012.(Func '@1008 '@1006 '@1012)
f(// expression type '@1008
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@1008.(Array '@1008)
xs, // expression type '@1020
i), // expression type '@1019
y))// definition type !'@162.(Func (Array '@162) !'@170.(Func '@162 '@170) Bool)

/**
function all(xs, p) 
        = xs.reduce(true, (prev, x) => prev && p(x));    

    
*/
// definition type !'@162.(Func (Array '@162) !'@170.(Func '@162 '@170) Bool)
function all(// definition type '@158
xs, // definition type '@159
p)
// expression type Bool
// expression type !'@71!'$3.(Func (Array '$3) '@71 !'@74.(Func '@71 '$3 '@74) '@71)
reduce(// expression type '@158
xs, // expression type Bool
true, // expression type !'@162.(Func Bool '@162 Bool)
(// definition type '@161
prev, // definition type '@162
x) => // expression type Bool
// expression type (Func Bool Bool Bool)
op&&(// expression type '@161
prev, // expression type '@172
// expression type '@159
p(// expression type '@162
x)))// definition type !'@183.(Func (Array '@183) !'@191.(Func '@183 '@191) Bool)

/**
function any(xs, p) 
        = xs.reduce(false, (prev, x) => prev || p(x));

    
*/
// definition type !'@183.(Func (Array '@183) !'@191.(Func '@183 '@191) Bool)
function any(// definition type '@179
xs, // definition type '@180
p)
// expression type Bool
// expression type !'@71!'$3.(Func (Array '$3) '@71 !'@74.(Func '@71 '$3 '@74) '@71)
reduce(// expression type '@179
xs, // expression type Bool
false, // expression type !'@183.(Func Bool '@183 Bool)
(// definition type '@182
prev, // definition type '@183
x) => // expression type Bool
// expression type (Func Bool Bool Bool)
op||(// expression type '@182
prev, // expression type '@193
// expression type '@180
p(// expression type '@183
x)))// definition type (Func (Array '@79) (Func '@79 '@81) Int)

/**
function count(xs, p) 
        = xs.reduce(0, (prev, x) => p(x) ? prev + 1 : prev);    

    
*/
// definition type (Func (Array '@79) (Func '@79 '@81) Int)
function count(// definition type '@63
xs, // definition type '@64
p)
// expression type Int
// expression type !'@71!'$3.(Func (Array '$3) '@71 !'@74.(Func '@71 '$3 '@74) '@71)
reduce(// expression type '@63
xs, // expression type Int
0, // expression type !'@79.(Func Int '@79 Int)
(// definition type '@78
prev, // definition type '@79
x) => // expression type Int
// expression type '@83
// expression type '@64
p(// expression type '@79
x) ? // expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type '@78
prev, // expression type Int
1)// expression type Int
prev)// definition type !'@455.(Func !'@454.(Array '@454) (Array '@455) Bool)

/**
function eq(xs, ys) 
        = xs.count == ys.count;    

    
*/
// definition type !'@455.(Func !'@454.(Array '@454) (Array '@455) Bool)
function eq(// definition type '@451
xs, // definition type '@452
ys)
// expression type Bool
// expression type !'@444.(Func '@444 '@444 Bool)
op==(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@451
xs), // expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@452
ys))// definition type !'@471!'@486.(Func (Array '@471) !'@472.(Func '@471 '@472) (Array '@486))

/**
function filter(xs, p) {
        var ys = xs.mutable;
        var i = 0;
        for (var x in xs) 
            if (p(x)) 
                ys[i++] = x;
        return ys.array.take(i);
    }

    
*/
// definition type !'@471!'@486.(Func (Array '@471) !'@472.(Func '@471 '@472) (Array '@486))
function filter(// definition type '@464
xs, // definition type '@465
p)
{
var // definition type !'@471.(ArrayBuilder '@471)
ys// expression type !'@471.(ArrayBuilder '@471)
// expression type !'T.(Func (Array 'T) (ArrayBuilder 'T))
mutable(// expression type '@464
xs);
var // definition type Int
i// expression type Int
0;
// definition type '$5
for (x in // expression type !'@471.(Array '@471)
xs)
// expression type '@474
// expression type '@465
p(// expression type '@471
x)// expression type !'@471.(ArrayBuilder '@471)
// expression type !'@471.(ArrayBuilder '@471)
ys = // expression type !'@471.(ArrayBuilder '@471)
// expression type !'@481.(Func (ArrayBuilder '@481) Int '@481 (ArrayBuilder '@481))
set(// expression type !'@471.(ArrayBuilder '@471)
ys, // expression type Int
// expression type Int
i++, // expression type '@471
x);
return // expression type !'@486.(Array '@486)
// expression type !'@431.(Func !'@430.(Array '@430) Int (Array '@431))
take(// expression type !'@471.(Array '@471)
// expression type !'T.(FuncSet ((Func Int (Func Int 'T) (Array 'T)) (Func (ArrayBuilder 'T) (Array 'T)) (Func Float2 (Array Float)) (Func Float3 (Array Float)) (Func Float4 (Array Float))))
array(// expression type !'@471.(ArrayBuilder '@471)
ys), // expression type Int
i);
}
// definition type !'@828!'@835.(Func '@828 Int (Array '@835))

/**
function repeat(x, n) 
        = (0 .. n).map(i => x);    

    
*/
// definition type !'@828!'@835.(Func '@828 Int (Array '@835))
function repeat(// definition type '@828
x, // definition type '@829
n)
// expression type !'@835.(Array '@835)
// expression type !'@94!'@113.(Func (Array '@94) !'@111.(Func '@94 '@111) (Array '@113))
map(// expression type (Array Int)
(// expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type Int
0, // expression type '@829
n)), // expression type !'@831!'@828.(Func '@831 '@828)
(// definition type '@831
i) => // expression type '@828
x)// definition type !'@845!'@824.(Func (Array '@824) !'@848.(Func '@824 '@848 '@845) (Array '@824))

/**
function prefixScan(xs, op) {
        if (xs.empty) return xs;
        var ys = xs[0].repeat(xs.count).mutable;
        for (var i in 1 .. ys.count)
            ys[i] = op(xs[i], ys[i-1]);
        return ys.array;
    }

    
*/
// definition type !'@845!'@824.(Func (Array '@824) !'@848.(Func '@824 '@848 '@845) (Array '@824))
function prefixScan(// definition type '@821
xs, // definition type '@822
op)
{
// expression type Bool
// expression type (Func !'@446.(Array '@446) Bool)
empty(// expression type '@821
xs)return // expression type !'@824.(Array '@824)
xs;
var // definition type !'@839.(ArrayBuilder '@839)
ys// expression type !'@839.(ArrayBuilder '@839)
// expression type !'T.(Func (Array 'T) (ArrayBuilder 'T))
mutable(// expression type !'@839.(Array '@839)
// expression type !'@828!'@835.(Func '@828 Int (Array '@835))
repeat(// expression type '@824
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@824.(Array '@824)
xs, // expression type Int
0), // expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type !'@824.(Array '@824)
xs)));
// definition type '$9
for (i in // expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type Int
1, // expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type !'@839.(ArrayBuilder '@839)
ys)))
// expression type !'@848.(ArrayBuilder '@848)
// expression type !'@839.(ArrayBuilder '@839)
ys = // expression type !'@848.(ArrayBuilder '@848)
// expression type !'@481.(Func (ArrayBuilder '@481) Int '@481 (ArrayBuilder '@481))
set(// expression type !'@839.(ArrayBuilder '@839)
ys, // expression type Int
i, // expression type '@848
// expression type '@822
op(// expression type '@824
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@824.(Array '@824)
xs, // expression type Int
i), // expression type '@839
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@839.(ArrayBuilder '@839)
ys, // expression type Int
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type Int
i, // expression type Int
1))));
return // expression type !'@848.(Array '@848)
// expression type !'T.(FuncSet ((Func Int (Func Int 'T) (Array 'T)) (Func (ArrayBuilder 'T) (Array 'T)) (Func Float2 (Array Float)) (Func Float3 (Array Float)) (Func Float4 (Array Float))))
array(// expression type !'@848.(ArrayBuilder '@848)
ys);
}
// definition type !'@154.(Func !'@137.(Array '@137) (Array '@154))

/**
function adjacentDifferences(xs) 
        = xs.indices.map(i => i > 0 ? xs[i] - xs[i-1] : xs[i]);
    
    
*/
// definition type !'@154.(Func !'@137.(Array '@137) (Array '@154))
function adjacentDifferences(// definition type '@10
xs)
// expression type !'@154.(Array '@154)
// expression type !'@94!'@113.(Func (Array '@94) !'@111.(Func '@94 '@111) (Array '@113))
map(// expression type (Array Int)
// expression type (Func !'@136.(Array '@136) (Array Int))
indices(// expression type '@10
xs), // expression type !'@137.(Func Int '@137)
(// definition type '@138
i) => // expression type '@137
// expression type Bool
// expression type !'@144.(Func '@144 '@144 Bool)
op>(// expression type '@138
i, // expression type Int
0) ? // expression type '@137
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type '@137
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@137.(Array '@137)
xs, // expression type Int
i), // expression type '@137
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@137.(Array '@137)
xs, // expression type Int
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type Int
i, // expression type Int
1)))// expression type '@137
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@137.(Array '@137)
xs, // expression type Int
i))// definition type !'@429.(Func !'@426.(Array '@426) Int Int (Array '@429))

/**
function slice(xs, from, to) 
        = (from .. to).map(i => xs.at(i));    

    
*/
// definition type !'@429.(Func !'@426.(Array '@426) Int Int (Array '@429))
function slice(// definition type '@420
xs, // definition type '@421
from, // definition type '@422
to)
// expression type !'@429.(Array '@429)
// expression type !'@94!'@113.(Func (Array '@94) !'@111.(Func '@94 '@111) (Array '@113))
map(// expression type (Array Int)
(// expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type '@421
from, // expression type '@422
to)), // expression type !'@426.(Func Int '@426)
(// definition type '@424
i) => // expression type '@426
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
at(// expression type '@420
xs, // expression type '@424
i))// definition type !'@978.(Func !'@970.(Array '@970) Int (Array '@978))

/**
function stride(xs, n) 
        = (0 .. xs.count / n).map(i => xs[i * n]);    

    
*/
// definition type !'@978.(Func !'@970.(Array '@970) Int (Array '@978))
function stride(// definition type '@967
xs, // definition type '@968
n)
// expression type !'@978.(Array '@978)
// expression type !'@94!'@113.(Func (Array '@94) !'@111.(Func '@94 '@111) (Array '@113))
map(// expression type (Array Int)
(// expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type Int
0, // expression type Int
// expression type !'@227.(Func '@227 '@227 '@227)
op/(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@967
xs), // expression type '@968
n))), // expression type !'@970.(Func Int '@970)
(// definition type '@972
i) => // expression type '@970
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@970.(Array '@970)
xs, // expression type Int
// expression type !'@336.(Func '@336 '@336 '@336)
op*(// expression type '@972
i, // expression type Int
n)))// definition type !'@947.(Func !'@943.(Array '@943) Int (Array '@947))

/**
function slices(xs, n) 
        = (0 .. n).map(i => xs.slice(i * n, (i+1) * n));    

    
*/
// definition type !'@947.(Func !'@943.(Array '@943) Int (Array '@947))
function slices(// definition type '@935
xs, // definition type '@936
n)
// expression type !'@947.(Array '@947)
// expression type !'@94!'@113.(Func (Array '@94) !'@111.(Func '@94 '@111) (Array '@113))
map(// expression type (Array Int)
(// expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type Int
0, // expression type '@936
n)), // expression type !'@944.(Func Int (Array '@944))
(// definition type '@938
i) => // expression type !'@944.(Array '@944)
// expression type !'@429.(Func !'@426.(Array '@426) Int Int (Array '@429))
slice(// expression type '@935
xs, // expression type Int
// expression type !'@336.(Func '@336 '@336 '@336)
op*(// expression type '@938
i, // expression type Int
n), // expression type Int
// expression type !'@336.(Func '@336 '@336 '@336)
op*(// expression type Int
(// expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type Int
i, // expression type Int
1)), // expression type Int
n)))// definition type !'@431.(Func !'@430.(Array '@430) Int (Array '@431))

/**
function take(xs, n) 
        = xs.slice(0, n);    

    
*/
// definition type !'@431.(Func !'@430.(Array '@430) Int (Array '@431))
function take(// definition type '@413
xs, // definition type '@414
n)
// expression type !'@431.(Array '@431)
// expression type !'@429.(Func !'@426.(Array '@426) Int Int (Array '@429))
slice(// expression type '@413
xs, // expression type Int
0, // expression type '@414
n)// definition type !'@931.(Func !'@928.(Array '@928) Int (Array '@931))

/**
function skip(xs, n) 
        = xs.slice(n, xs.count - n);    

    
*/
// definition type !'@931.(Func !'@928.(Array '@928) Int (Array '@931))
function skip(// definition type '@925
xs, // definition type '@926
n)
// expression type !'@931.(Array '@931)
// expression type !'@429.(Func !'@426.(Array '@426) Int Int (Array '@429))
slice(// expression type '@925
xs, // expression type '@926
n, // expression type Int
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@925
xs), // expression type '@926
n))// definition type !'@435.(Func !'@432.(Array '@432) Int (Array '@435))

/**
function dropSuffix(xs, n) 
        = xs.take(xs.count - n);    

    
*/
// definition type !'@435.(Func !'@432.(Array '@432) Int (Array '@435))
function dropSuffix(// definition type '@407
xs, // definition type '@408
n)
// expression type !'@435.(Array '@435)
// expression type !'@431.(Func !'@430.(Array '@430) Int (Array '@431))
take(// expression type '@407
xs, // expression type Int
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@407
xs), // expression type '@408
n))// definition type !'@988.(Func !'@985.(Array '@985) Int (Array '@988))

/**
function suffix(xs, n) 
        = xs.skip(xs.count-n);

    
*/
// definition type !'@988.(Func !'@985.(Array '@985) Int (Array '@988))
function suffix(// definition type '@982
xs, // definition type '@983
n)
// expression type !'@988.(Array '@988)
// expression type !'@931.(Func !'@928.(Array '@928) Int (Array '@931))
skip(// expression type '@982
xs, // expression type Int
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@982
xs), // expression type '@983
n))// definition type !'@877!'@888.(Func !'@879.(Array '@879) '@877 (Array '@888))

/**
function reverse(xs, n) 
        = xs.indices.map(i => xs[xs.count-1-i]);    

    
*/
// definition type !'@877!'@888.(Func !'@879.(Array '@879) '@877 (Array '@888))
function reverse(// definition type '@876
xs, // definition type '@877
n)
// expression type !'@888.(Array '@888)
// expression type !'@94!'@113.(Func (Array '@94) !'@111.(Func '@94 '@111) (Array '@113))
map(// expression type (Array Int)
// expression type (Func !'@136.(Array '@136) (Array Int))
indices(// expression type '@876
xs), // expression type !'@879.(Func Int '@879)
(// definition type '@880
i) => // expression type '@879
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@879.(Array '@879)
xs, // expression type Int
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type Int
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type !'@879.(Array '@879)
xs), // expression type Int
1), // expression type '@880
i)))// definition type !'@264.(Func Int !'@263.(Func Int '@263) (Array '@264))

/**
function gen(cnt, f) 
        = (0 .. cnt).map(f);    

    
*/
// definition type !'@264.(Func Int !'@263.(Func Int '@263) (Array '@264))
function gen(// definition type '@259
cnt, // definition type '@260
f)
// expression type !'@264.(Array '@264)
// expression type !'@94!'@113.(Func (Array '@94) !'@111.(Func '@94 '@111) (Array '@113))
map(// expression type (Array Int)
(// expression type (Array Int)
// expression type (Func Int Int (Array Int))
op..(// expression type Int
0, // expression type '@259
cnt)), // expression type '@260
f)// definition type !'@265!'@283.(Func (Array '@265) (Array '@265) (Array '@283))

/**
function concat(xs, ys) 
        = gen(xs.count + ys.count, i => i < xs.count ? xs[i] : ys[i - xs.count]);    

    
*/
// definition type !'@265!'@283.(Func (Array '@265) (Array '@265) (Array '@283))
function concat(// definition type '@253
xs, // definition type '@254
ys)
// expression type !'@283.(Array '@283)
// expression type !'@264.(Func Int !'@263.(Func Int '@263) (Array '@264))
gen(// expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@253
xs), // expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@254
ys)), // expression type !'@265.(Func Int '@265)
(// definition type '@268
i) => // expression type '@265
// expression type Bool
// expression type !'@274.(Func '@274 '@274 Bool)
op<(// expression type '@268
i, // expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type !'@265.(Array '@265)
xs)) ? // expression type '@265
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@265.(Array '@265)
xs, // expression type Int
i)// expression type '@266
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@266.(Array '@266)
ys, // expression type Int
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type Int
i, // expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type !'@265.(Array '@265)
xs))))// definition type !'@364.(Func !'@355.(Array '@355) Int Int (Array '@364))

/**
function cut(xs, from, n) 
        = gen(xs.count - n, i => i < from ? xs[i] : xs[i + n]);    

    
*/
// definition type !'@364.(Func !'@355.(Array '@355) Int Int (Array '@364))
function cut(// definition type '@351
xs, // definition type '@352
from, // definition type '@353
n)
// expression type !'@364.(Array '@364)
// expression type !'@264.(Func Int !'@263.(Func Int '@263) (Array '@264))
gen(// expression type Int
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@351
xs), // expression type '@353
n), // expression type !'@355.(Func Int '@355)
(// definition type '@357
i) => // expression type '@355
// expression type Bool
// expression type !'@274.(Func '@274 '@274 Bool)
op<(// expression type '@357
i, // expression type '@352
from) ? // expression type '@355
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@355.(Array '@355)
xs, // expression type '@352
i)// expression type '@355
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@355.(Array '@355)
xs, // expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type Int
i, // expression type Int
n)))// definition type !'@957!'@963.(Func !'@956.(Array '@956) Int (Array '@957) (Array '@963))

/**
function splice(xs, from, ys) 
        = xs.take(from).concat(ys).concat(xs.skip(from));    

    
*/
// definition type !'@957!'@963.(Func !'@956.(Array '@956) Int (Array '@957) (Array '@963))
function splice(// definition type '@952
xs, // definition type '@953
from, // definition type '@954
ys)
// expression type !'@963.(Array '@963)
// expression type !'@265!'@283.(Func (Array '@265) (Array '@265) (Array '@283))
concat(// expression type !'@959.(Array '@959)
// expression type !'@265!'@283.(Func (Array '@265) (Array '@265) (Array '@283))
concat(// expression type !'@957.(Array '@957)
// expression type !'@431.(Func !'@430.(Array '@430) Int (Array '@431))
take(// expression type '@952
xs, // expression type '@953
from), // expression type '@954
ys), // expression type !'@961.(Array '@961)
// expression type !'@931.(Func !'@928.(Array '@928) Int (Array '@931))
skip(// expression type !'@956.(Array '@956)
xs, // expression type Int
from))// definition type (Func (Array Int) Int)

/**
function sum(xs) 
        = xs.reduce(0, op+);    

    
*/
// definition type (Func (Array Int) Int)
function sum(// definition type '@231
xs)
// expression type Int
// expression type !'@71!'$3.(Func (Array '$3) '@71 !'@74.(Func '@71 '$3 '@74) '@71)
reduce(// expression type '@231
xs, // expression type Int
0, // expression type !'@88.(Func '@88 '@88 '@88)
op+)// definition type (Func (Array Int) Int)

/**
function product(xs) 
        = xs.reduce(1, op*);    
    
    
*/
// definition type (Func (Array Int) Int)
function product(// definition type '@853
xs)
// expression type Int
// expression type !'@71!'$3.(Func (Array '$3) '@71 !'@74.(Func '@71 '$3 '@74) '@71)
reduce(// expression type '@853
xs, // expression type Int
1, // expression type !'@336.(Func '@336 '@336 '@336)
op*)// definition type (Func (Array Int) Int)

/**
function average(xs) 
        = xs.sum / xs.count;    

    
*/
// definition type (Func (Array Int) Int)
function average(// definition type '@221
xs)
// expression type Int
// expression type !'@227.(Func '@227 '@227 '@227)
op/(// expression type Int
// expression type (Func (Array Int) Int)
sum(// expression type '@221
xs), // expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type (Array Int)
xs))// definition type (Func (Array '@634) '@634)

/**
function min(xs) 
        = xs.reduce(xs[0], min);    

    
*/
// definition type (Func (Array '@634) '@634)
function min(// definition type '@645
xs)
// expression type '@634
// expression type !'@71!'$3.(Func (Array '$3) '@71 !'@74.(Func '@71 '$3 '@74) '@71)
reduce(// expression type '@645
xs, // expression type '@647
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type '@645
xs, // expression type Int
0), // expression type !'@634.(FuncSet !'@644.((Func '@634 '@634 '@634) !'@643.(Func '@643 '@644)))
min)// definition type (Func (Array '@660) '@660)

/**
function max(xs) 
        = xs.reduce(xs[0], max);

    
*/
// definition type (Func (Array '@660) '@660)
function max(// definition type '@665
xs)
// expression type '@660
// expression type !'@71!'$3.(Func (Array '$3) '@71 !'@74.(Func '@71 '$3 '@74) '@71)
reduce(// expression type '@665
xs, // expression type '@667
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type '@665
xs, // expression type Int
0), // expression type !'@660.(FuncSet !'@664.((Func '@660 '@660 '@660) !'@663.(Func '@663 '@664)))
max)// definition type !'@702.(Func (ArrayBuilder '@702) Int Int (ArrayBuilder '@702))

/**
function partition(a, lo, hi) {
        var pivot = a[lo];
        var i = lo-1;
        var j = hi+1;
        while (true) {
            do { i++; } while (a[i] < pivot);
            do { j--; } while (a[j] > pivot);
            if (i >= j) return a;
            var tmp = a[i];
            a[i] = a[j];
            a[j] = tmp;
        }
        return a;
    }

    
*/
// definition type !'@702.(Func (ArrayBuilder '@702) Int Int (ArrayBuilder '@702))
function partition(// definition type '@698
a, // definition type '@699
lo, // definition type '@700
hi)
{
var // definition type '@702
pivot// expression type '@702
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type '@698
a, // expression type '@699
lo);
var // definition type Int
i// expression type Int
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type Int
lo, // expression type Int
1);
var // definition type Int
j// expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type '@700
hi, // expression type Int
1);
while (// expression type Bool
true)
// expression type Bool
true{
do
{
// expression type Int
// expression type Int
i++;
}
// expression type Bool
// expression type !'@274.(Func '@274 '@274 Bool)
op<(// expression type '@702
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@702.(Array '@702)
a, // expression type Int
i), // expression type '@702
pivot);
do
{
// expression type Int
// expression type Int
j--;
}
// expression type Bool
// expression type !'@144.(Func '@144 '@144 Bool)
op>(// expression type '@702
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@702.(Array '@702)
a, // expression type Int
j), // expression type '@702
pivot);
// expression type Bool
// expression type !'@554.(Func '@554 '@554 Bool)
op>=(// expression type Int
i, // expression type Int
j)return // expression type !'@702.(Array '@702)
a;
var // definition type '@702
tmp// expression type '@702
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@702.(Array '@702)
a, // expression type Int
i);
// expression type !'@702.(ArrayBuilder '@702)
// expression type !'@702.(Array '@702)
a = // expression type !'@702.(ArrayBuilder '@702)
// expression type !'@481.(Func (ArrayBuilder '@481) Int '@481 (ArrayBuilder '@481))
set(// expression type !'@702.(Array '@702)
a, // expression type Int
i, // expression type '@702
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@702.(Array '@702)
a, // expression type Int
j));
// expression type !'@702.(ArrayBuilder '@702)
// expression type !'@702.(ArrayBuilder '@702)
a = // expression type !'@702.(ArrayBuilder '@702)
// expression type !'@481.(Func (ArrayBuilder '@481) Int '@481 (ArrayBuilder '@481))
set(// expression type !'@702.(ArrayBuilder '@702)
a, // expression type Int
j, // expression type '@702
tmp);
}
{
do
{
// expression type Int
// expression type Int
i++;
}
// expression type Bool
// expression type !'@274.(Func '@274 '@274 Bool)
op<(// expression type '@702
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@702.(Array '@702)
a, // expression type Int
i), // expression type '@702
pivot);
do
{
// expression type Int
// expression type Int
j--;
}
// expression type Bool
// expression type !'@144.(Func '@144 '@144 Bool)
op>(// expression type '@702
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@702.(Array '@702)
a, // expression type Int
j), // expression type '@702
pivot);
// expression type Bool
// expression type !'@554.(Func '@554 '@554 Bool)
op>=(// expression type Int
i, // expression type Int
j)return // expression type !'@702.(Array '@702)
a;
var // definition type '@702
tmp// expression type '@702
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@702.(Array '@702)
a, // expression type Int
i);
// expression type !'@702.(ArrayBuilder '@702)
// expression type !'@702.(Array '@702)
a = // expression type !'@702.(ArrayBuilder '@702)
// expression type !'@481.(Func (ArrayBuilder '@481) Int '@481 (ArrayBuilder '@481))
set(// expression type !'@702.(Array '@702)
a, // expression type Int
i, // expression type '@702
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type !'@702.(Array '@702)
a, // expression type Int
j));
// expression type !'@702.(ArrayBuilder '@702)
// expression type !'@702.(ArrayBuilder '@702)
a = // expression type !'@702.(ArrayBuilder '@702)
// expression type !'@481.(Func (ArrayBuilder '@481) Int '@481 (ArrayBuilder '@481))
set(// expression type !'@702.(ArrayBuilder '@702)
a, // expression type Int
j, // expression type '@702
tmp);
}
return // expression type !'@702.(ArrayBuilder '@702)
a;
}
// definition type (Func (ArrayBuilder Int) Int Int (ArrayBuilder Int))

/**
function qsort(a, lo, hi) {
        if (lo < hi) {
            var p = a[lo]; 
            a = partition(a, lo, hi);
            a = qsort(a, lo, p);
            a = qsort(a, p+1, hi);
        }
        return a;
    }

    
*/
// definition type (Func (ArrayBuilder Int) Int Int (ArrayBuilder Int))
function qsort(// definition type '@688
a, // definition type '@689
lo, // definition type '@690
hi)
{
// expression type Bool
// expression type !'@274.(Func '@274 '@274 Bool)
op<(// expression type '@689
lo, // expression type '@690
hi){
var // definition type '@693
p// expression type '@693
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type '@688
a, // expression type '@690
lo);
// expression type !'@693.(ArrayBuilder '@693)
// expression type undefined
a = // expression type !'@693.(ArrayBuilder '@693)
// expression type !'@702.(Func (ArrayBuilder '@702) Int Int (ArrayBuilder '@702))
partition(// expression type !'@693.(Array '@693)
a, // expression type Int
lo, // expression type Int
hi);
// expression type !'@693.(ArrayBuilder '@693)
// expression type undefined
a = // expression type '@718
// expression type !'@684!'@685!'@686!'@687.(Func '@684 '@685 '@686 '@687)
qsort(// expression type !'@693.(ArrayBuilder '@693)
a, // expression type Int
lo, // expression type '@693
p);
// expression type (ArrayBuilder Int)
// expression type undefined
a = // expression type '@723
// expression type !'@684!'@685!'@686!'@687.(Func '@684 '@685 '@686 '@687)
qsort(// expression type !'@693.(ArrayBuilder '@693)
a, // expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type '@693
p, // expression type Int
1), // expression type Int
hi);
}
return // expression type (ArrayBuilder Int)
a;
}
// definition type (Func (Array Int) (Array Int))

/**
function sort(xs) 
        = xs.mutable.qsort(0, xs.count-1).array;    

    
*/
// definition type (Func (Array Int) (Array Int))
function sort(// definition type '@682
xs)
// expression type (Array Int)
// expression type !'T.(FuncSet ((Func Int (Func Int 'T) (Array 'T)) (Func (ArrayBuilder 'T) (Array 'T)) (Func Float2 (Array Float)) (Func Float3 (Array Float)) (Func Float4 (Array Float))))
array(// expression type (ArrayBuilder Int)
// expression type (Func (ArrayBuilder Int) Int Int (ArrayBuilder Int))
qsort(// expression type !'@724.(ArrayBuilder '@724)
// expression type !'T.(Func (Array 'T) (ArrayBuilder 'T))
mutable(// expression type '@682
xs), // expression type Int
0, // expression type Int
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type !'@724.(Array '@724)
xs), // expression type Int
1)))// definition type (Func (Array Int) Int)

/**
function median(xs) {        
        var ys = xs.sort;
        return ys.count % 2 == 0 
            ? ys[ys.count / 2] 
            : ys[ys.count / 2 - 1] + ys[ys.count / 2 + 1] / 2;
    }

    
*/
// definition type (Func (Array Int) Int)
function median(// definition type '@678
xs)
{
var // definition type (Array Int)
ys// expression type (Array Int)
// expression type (Func (Array Int) (Array Int))
sort(// expression type '@678
xs);
return // expression type Int
// expression type Bool
// expression type !'@444.(Func '@444 '@444 Bool)
op==(// expression type Int
// expression type !'@732.(Func '@732 '@732 '@732)
op%(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type (Array Int)
ys), // expression type Int
2), // expression type Int
0) ? // expression type Int
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type (Array Int)
ys, // expression type Int
// expression type !'@227.(Func '@227 '@227 '@227)
op/(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type (Array Int)
ys), // expression type Int
2))// expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type Int
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type (Array Int)
ys, // expression type Int
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type Int
// expression type !'@227.(Func '@227 '@227 '@227)
op/(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type (Array Int)
ys), // expression type Int
2), // expression type Int
1)), // expression type Int
// expression type !'@227.(Func '@227 '@227 '@227)
op/(// expression type Int
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type (Array Int)
ys, // expression type Int
// expression type !'@88.(Func '@88 '@88 '@88)
op+(// expression type Int
// expression type !'@227.(Func '@227 '@227 '@227)
op/(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type (Array Int)
ys), // expression type Int
2), // expression type Int
1)), // expression type Int
2));
}
// definition type (Func !'@557.(Array '@557) Int Bool)

/**
function inRange(xs, n) 
        = n >= 0 && n < xs.count;    

    
*/
// definition type (Func !'@557.(Array '@557) Int Bool)
function inRange(// definition type '@547
xs, // definition type '@548
n)
// expression type Bool
// expression type (Func Bool Bool Bool)
op&&(// expression type Bool
// expression type !'@554.(Func '@554 '@554 Bool)
op>=(// expression type '@548
n, // expression type Int
0), // expression type Bool
// expression type !'@274.(Func '@274 '@274 Bool)
op<(// expression type Int
n, // expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@547
xs)))// definition type !'@565.(Func !'@563.(Array '@563) '@565)

/**
function last(xs) 
        = xs[xs.count - 1];    

    
*/
// definition type !'@565.(Func !'@563.(Array '@563) '@565)
function last(// definition type '@561
xs)
// expression type '@565
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type '@561
xs, // expression type Int
// expression type !'@129.(Func '@129 '@129 '@129)
op-(// expression type Int
// expression type !'T.(FuncSet !'@79!'@81.((Func (Array 'T) Int) (Func (Array '@79) (Func '@79 '@81) Int)))
count(// expression type '@561
xs), // expression type Int
1))// definition type !'@491.(Func !'@491.(Array '@491) '@491)

/**
function first(xs) 
        = xs[0];

    
*/
// definition type !'@491.(Func !'@491.(Array '@491) '@491)
function first(// definition type '@489
xs)
// expression type '@491
// expression type !'T.(Func !'T.(Array 'T) Int 'T)
op[](// expression type '@489
xs, // expression type Int
0)// definition type !'@71!'$3.(Func (Array '$3) '@71 !'@74.(Func '@71 '$3 '@74) '@71)

/**
function reduce(xs, acc, f) {
        for (var x in xs)
            acc = f(acc, x);
        return acc;
    }

    
*/
// definition type !'@71!'$3.(Func (Array '$3) '@71 !'@74.(Func '@71 '$3 '@74) '@71)
function reduce(// definition type '@70
xs, // definition type '@71
acc, // definition type '@72
f)
{
// definition type '$3
for (x in // expression type '@70
xs)
// expression type '@71
// expression type undefined
acc = // expression type '@77
// expression type '@72
f(// expression type '@71
acc, // expression type '$3
x);
return // expression type '@71
acc;
}
// definition type !'$6.(Func (Array !'@265.(Array '@265)) (Array '$6))

/**
function flatten(xs)
        = xs.reduce([], concat);

    
*/
// definition type !'$6.(Func (Array !'@265.(Array '@265)) (Array '$6))
function flatten(// definition type '@500
xs)
// expression type !'$6.(Array '$6)
// expression type !'@71!'$3.(Func (Array '$3) '@71 !'@74.(Func '@71 '$3 '@74) '@71)
reduce(// expression type '@500
xs, // expression type !'$6.(Array '$6)
[], // expression type !'@265!'@283.(Func (Array '@265) (Array '@265) (Array '@283))
concat)// definition type !'@505!'@509.(Func (Array '@505) !'@506.(Func '@505 '@506) (Array '@509))

/**
function flatMap(xs, f)       
        = xs.map(f).flatten;

*/
// definition type !'@505!'@509.(Func (Array '@505) !'@506.(Func '@505 '@506) (Array '@509))
function flatMap(// definition type '@495
xs, // definition type '@496
f)
// expression type !'@509.(Array '@509)
// expression type !'$6.(Func (Array !'@265.(Array '@265)) (Array '$6))
flatten(// expression type !'@507.(Array '@507)
// expression type !'@94!'@113.(Func (Array '@94) !'@111.(Func '@94 '@111) (Array '@113))
map(// expression type '@495
xs, // expression type '@496
f))}
