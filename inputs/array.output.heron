// Generated on Thu Mar 15 2018 19:14:07 GMT-0400 (Eastern Daylight Time)
heron:std:0.1// scope module_1901
heron:std.array:0.1{
// scope funcDef_18
// definition unit_FuncDef18
// type ((Any) -> Any)

/**
function unit(x) 
        = [x];

    
*/
// scope funcDef_18
// definition unit_FuncDef18
// type ((Any) -> Any)
function unit(// definition x_FuncParamDef10
// type Any
x)
// expression ArrayLiteral [x]
// type Array
[// reference x_14:varName:var[x_FuncParamDef10]
// expression VarName x
// type Any
x]// scope funcDef_57
// definition map_FuncDef57
// type ((Any Any) -> Any)

/**
function map(xs, f)
        = array(xs.count, i => f(xs[i]));        

    
*/
// scope funcDef_57
// definition map_FuncDef57
// type ((Any Any) -> Any)
function map(// definition xs_FuncParamDef24
// type Any
xs, // definition f_FuncParamDef27
// type Any
f)
// expression FunCall array(count(xs),lambda52(i_FuncParamDef38)undefined)
// type Any
// reference array_31:varName:var[array_FuncDef1018, array_FuncDef1138, array_FuncDef1201, array_FuncDef1231, array_FuncDef1266]
// expression VarName array
// type Any
array(// expression FunCall count(xs)
// type Any
// reference count_32:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_34:varName:var[xs_FuncParamDef24]
// expression VarName xs
// type Any
xs), // scope lambdaExpr_52
// expression Lambda lambda52(i_FuncParamDef38)undefined
// type Lambda
(// definition i_FuncParamDef38
// type Any
i)// scope lambdaBody_51
 => // expression FunCall f(op[](xs,i))
// type Any
// reference f_41:varName:var[f_FuncParamDef27]
// expression VarName f
// type Any
f(// expression FunCall op[](xs,i)
// type Any
// reference op[]_42:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_44:varName:var[xs_FuncParamDef24]
// expression VarName xs
// type Any
xs, // reference i_46:varName:var[i_FuncParamDef38]
// expression VarName i
// type Any
i)))// scope funcDef_84
// definition min_FuncDef84
// type ((Any Any) -> Any)

/**
function min(x, y) 
        = x <= y ? x : y;

    
*/
// scope funcDef_84
// definition min_FuncDef84
// type ((Any Any) -> Any)
function min(// definition x_FuncParamDef63
// type Any
x, // definition y_FuncParamDef66
// type Any
y)
// expression ConditionalExpr op<=(x,y) ? x : y
// type Any
// expression FunCall op<=(x,y)
// type Any
// reference op<=_69:varName:var[op<=_FuncDef803]
// expression VarName op<=
// type Any
op<=(// reference x_71:varName:var[x_FuncParamDef63]
// expression VarName x
// type Any
x, // reference y_73:varName:var[y_FuncParamDef66]
// expression VarName y
// type Any
y) ? // reference x_77:varName:var[x_FuncParamDef63]
// expression VarName x
// type Any
x// reference y_79:varName:var[y_FuncParamDef66]
// expression VarName y
// type Any
y// scope funcDef_111
// definition max_FuncDef111
// type ((Any Any) -> Any)

/**
function max(x, y) 
        = x <= y ? x : y;
   
    
*/
// scope funcDef_111
// definition max_FuncDef111
// type ((Any Any) -> Any)
function max(// definition x_FuncParamDef90
// type Any
x, // definition y_FuncParamDef93
// type Any
y)
// expression ConditionalExpr op<=(x,y) ? x : y
// type Any
// expression FunCall op<=(x,y)
// type Any
// reference op<=_96:varName:var[op<=_FuncDef803]
// expression VarName op<=
// type Any
op<=(// reference x_98:varName:var[x_FuncParamDef90]
// expression VarName x
// type Any
x, // reference y_100:varName:var[y_FuncParamDef93]
// expression VarName y
// type Any
y) ? // reference x_104:varName:var[x_FuncParamDef90]
// expression VarName x
// type Any
x// reference y_106:varName:var[y_FuncParamDef93]
// expression VarName y
// type Any
y// scope funcDef_144
// definition shorter_FuncDef144
// type ((Any Any) -> Any)

/**
function shorter(xs, ys) 
        = xs.count <= ys.count ? xs : ys;
   
    
*/
// scope funcDef_144
// definition shorter_FuncDef144
// type ((Any Any) -> Any)
function shorter(// definition xs_FuncParamDef117
// type Any
xs, // definition ys_FuncParamDef120
// type Any
ys)
// expression ConditionalExpr op<=(count(xs),count(ys)) ? xs : ys
// type Any
// expression FunCall op<=(count(xs),count(ys))
// type Any
// reference op<=_123:varName:var[op<=_FuncDef803]
// expression VarName op<=
// type Any
op<=(// expression FunCall count(xs)
// type Any
// reference count_124:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_126:varName:var[xs_FuncParamDef117]
// expression VarName xs
// type Any
xs), // expression FunCall count(ys)
// type Any
// reference count_129:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference ys_131:varName:var[ys_FuncParamDef120]
// expression VarName ys
// type Any
ys)) ? // reference xs_137:varName:var[xs_FuncParamDef117]
// expression VarName xs
// type Any
xs// reference ys_139:varName:var[ys_FuncParamDef120]
// expression VarName ys
// type Any
ys// scope funcDef_177
// definition longer_FuncDef177
// type ((Any Any) -> Any)

/**
function longer(xs, ys) 
        = xs.count >= ys.count ? xs : ys;

    
*/
// scope funcDef_177
// definition longer_FuncDef177
// type ((Any Any) -> Any)
function longer(// definition xs_FuncParamDef150
// type Any
xs, // definition ys_FuncParamDef153
// type Any
ys)
// expression ConditionalExpr op>=(count(xs),count(ys)) ? xs : ys
// type Any
// expression FunCall op>=(count(xs),count(ys))
// type Any
// reference op>=_156:varName:var[op>=_FuncDef757]
// expression VarName op>=
// type Any
op>=(// expression FunCall count(xs)
// type Any
// reference count_157:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_159:varName:var[xs_FuncParamDef150]
// expression VarName xs
// type Any
xs), // expression FunCall count(ys)
// type Any
// reference count_162:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference ys_164:varName:var[ys_FuncParamDef153]
// expression VarName ys
// type Any
ys)) ? // reference xs_170:varName:var[xs_FuncParamDef150]
// expression VarName xs
// type Any
xs// reference ys_172:varName:var[ys_FuncParamDef153]
// expression VarName ys
// type Any
ys// scope funcDef_197
// definition empty_FuncDef197
// type ((Any) -> Any)

/**
function empty(xs) 
        = xs.count == 0;

    
*/
// scope funcDef_197
// definition empty_FuncDef197
// type ((Any) -> Any)
function empty(// definition xs_FuncParamDef183
// type Any
xs)
// expression FunCall op==(count(xs),0)
// type Any
// reference op==_186:varName:var[op==_FuncDef849]
// expression VarName op==
// type Any
op==(// expression FunCall count(xs)
// type Any
// reference count_187:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_189:varName:var[xs_FuncParamDef183]
// expression VarName xs
// type Any
xs), // expression NumLiteral 0
// type Num
0)// scope funcDef_218
// definition at_FuncDef218
// type ((Any Any) -> Any)

/**
function at(xs, i) 
        = xs[i];

    
*/
// scope funcDef_218
// definition at_FuncDef218
// type ((Any Any) -> Any)
function at(// definition xs_FuncParamDef203
// type Any
xs, // definition i_FuncParamDef206
// type Any
i)
// expression FunCall op[](xs,i)
// type Any
// reference op[]_209:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_211:varName:var[xs_FuncParamDef203]
// expression VarName xs
// type Any
xs, // reference i_213:varName:var[i_FuncParamDef206]
// expression VarName i
// type Any
i)// scope funcDef_242
// definition selectByIndex_FuncDef242
// type ((Any Any) -> Any)

/**
function selectByIndex(xs, indices) 
        = indices.map(xs.at);

    
*/
// scope funcDef_242
// definition selectByIndex_FuncDef242
// type ((Any Any) -> Any)
function selectByIndex(// definition xs_FuncParamDef224
// type Any
xs, // definition indices_FuncParamDef227
// type Any
indices)
// expression FunCall map(indices,at(xs))
// type Any
// reference map_230:varName:var[map_FuncDef57]
// expression VarName map
// type Any
map(// reference indices_232:varName:var[indices_FuncParamDef227]
// expression VarName indices
// type Any
indices, // expression FunCall at(xs)
// type Any
// reference at_233:varName:var[at_FuncDef218]
// expression VarName at
// type Any
at(// reference xs_235:varName:var[xs_FuncParamDef224]
// expression VarName xs
// type Any
xs))// scope funcDef_262
// definition indices_FuncDef262
// type ((Any) -> Any)

/**
function indices(xs) 
        = 0 .. xs.count;

    
*/
// scope funcDef_262
// definition indices_FuncDef262
// type ((Any) -> Any)
function indices(// definition xs_FuncParamDef248
// type Any
xs)
// expression FunCall op..(0,count(xs))
// type Any
// reference op.._251:varName:var[op.._FuncDef941]
// expression VarName op..
// type Any
op..(// expression NumLiteral 0
// type Num
0, // expression FunCall count(xs)
// type Any
// reference count_253:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_255:varName:var[xs_FuncParamDef248]
// expression VarName xs
// type Any
xs))// scope funcDef_344
// definition zip_FuncDef344
// type ((Any Any Any) -> Any)

/**
function zip(xs, ys, f) 
        = xs.count <= ys.count 
            ? xs.map((x, i) => f(x, ys[i]))
            : ys.map((y, i) => f(xs[i], y));

    
*/
// scope funcDef_344
// definition zip_FuncDef344
// type ((Any Any Any) -> Any)
function zip(// definition xs_FuncParamDef268
// type Any
xs, // definition ys_FuncParamDef271
// type Any
ys, // definition f_FuncParamDef274
// type Any
f)
// expression ConditionalExpr op<=(count(xs),count(ys)) ? map(xs,lambda312(x_FuncParamDef294,i_FuncParamDef296)undefined) : map(ys,lambda337(y_FuncParamDef319,i_FuncParamDef321)undefined)
// type Any
// expression FunCall op<=(count(xs),count(ys))
// type Any
// reference op<=_277:varName:var[op<=_FuncDef803]
// expression VarName op<=
// type Any
op<=(// expression FunCall count(xs)
// type Any
// reference count_278:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_280:varName:var[xs_FuncParamDef268]
// expression VarName xs
// type Any
xs), // expression FunCall count(ys)
// type Any
// reference count_283:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference ys_285:varName:var[ys_FuncParamDef271]
// expression VarName ys
// type Any
ys)) ? // expression FunCall map(xs,lambda312(x_FuncParamDef294,i_FuncParamDef296)undefined)
// type Any
// reference map_290:varName:var[map_FuncDef57]
// expression VarName map
// type Any
map(// reference xs_292:varName:var[xs_FuncParamDef268]
// expression VarName xs
// type Any
xs, // scope lambdaExpr_312
// expression Lambda lambda312(x_FuncParamDef294,i_FuncParamDef296)undefined
// type Lambda
(// definition x_FuncParamDef294
// type Any
x, // definition i_FuncParamDef296
// type Any
i)// scope lambdaBody_311
 => // expression FunCall f(x,op[](ys,i))
// type Any
// reference f_299:varName:var[f_FuncParamDef274]
// expression VarName f
// type Any
f(// reference x_301:varName:var[x_FuncParamDef294]
// expression VarName x
// type Any
x, // expression FunCall op[](ys,i)
// type Any
// reference op[]_302:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference ys_304:varName:var[ys_FuncParamDef271]
// expression VarName ys
// type Any
ys, // reference i_306:varName:var[i_FuncParamDef296]
// expression VarName i
// type Any
i)))// expression FunCall map(ys,lambda337(y_FuncParamDef319,i_FuncParamDef321)undefined)
// type Any
// reference map_315:varName:var[map_FuncDef57]
// expression VarName map
// type Any
map(// reference ys_317:varName:var[ys_FuncParamDef271]
// expression VarName ys
// type Any
ys, // scope lambdaExpr_337
// expression Lambda lambda337(y_FuncParamDef319,i_FuncParamDef321)undefined
// type Lambda
(// definition y_FuncParamDef319
// type Any
y, // definition i_FuncParamDef321
// type Any
i)// scope lambdaBody_336
 => // expression FunCall f(op[](xs,i),y)
// type Any
// reference f_324:varName:var[f_FuncParamDef274]
// expression VarName f
// type Any
f(// expression FunCall op[](xs,i)
// type Any
// reference op[]_325:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_327:varName:var[xs_FuncParamDef268]
// expression VarName xs
// type Any
xs, // reference i_329:varName:var[i_FuncParamDef321]
// expression VarName i
// type Any
i), // reference y_333:varName:var[y_FuncParamDef319]
// expression VarName y
// type Any
y))// scope funcDef_382
// definition all_FuncDef382
// type ((Any Any) -> Any)

/**
function all(xs, p) 
        = xs.reduce(true, (prev, x) => prev && p(x));    

    
*/
// scope funcDef_382
// definition all_FuncDef382
// type ((Any Any) -> Any)
function all(// definition xs_FuncParamDef350
// type Any
xs, // definition p_FuncParamDef353
// type Any
p)
// expression FunCall reduce(xs,true,lambda377(prev_FuncParamDef361,x_FuncParamDef363)undefined)
// type Any
// reference reduce_356:varName:var[reduce_FuncDef1856]
// expression VarName reduce
// type Any
reduce(// reference xs_358:varName:var[xs_FuncParamDef350]
// expression VarName xs
// type Any
xs, // expression BoolLiteral true
// type Bool
true, // scope lambdaExpr_377
// expression Lambda lambda377(prev_FuncParamDef361,x_FuncParamDef363)undefined
// type Lambda
(// definition prev_FuncParamDef361
// type Any
prev, // definition x_FuncParamDef363
// type Any
x)// scope lambdaBody_376
 => // expression FunCall op&&(prev,p(x))
// type Any
// reference op&&_365:varName:var[op&&_FuncDef872]
// expression VarName op&&
// type Any
op&&(// reference prev_367:varName:var[prev_FuncParamDef361]
// expression VarName prev
// type Any
prev, // expression FunCall p(x)
// type Any
// reference p_369:varName:var[p_FuncParamDef353]
// expression VarName p
// type Any
p(// reference x_371:varName:var[x_FuncParamDef363]
// expression VarName x
// type Any
x)))// scope funcDef_420
// definition any_FuncDef420
// type ((Any Any) -> Any)

/**
function any(xs, p) 
        = xs.reduce(false, (prev, x) => prev || p(x));

    
*/
// scope funcDef_420
// definition any_FuncDef420
// type ((Any Any) -> Any)
function any(// definition xs_FuncParamDef388
// type Any
xs, // definition p_FuncParamDef391
// type Any
p)
// expression FunCall reduce(xs,false,lambda415(prev_FuncParamDef399,x_FuncParamDef401)undefined)
// type Any
// reference reduce_394:varName:var[reduce_FuncDef1856]
// expression VarName reduce
// type Any
reduce(// reference xs_396:varName:var[xs_FuncParamDef388]
// expression VarName xs
// type Any
xs, // expression BoolLiteral false
// type Bool
false, // scope lambdaExpr_415
// expression Lambda lambda415(prev_FuncParamDef399,x_FuncParamDef401)undefined
// type Lambda
(// definition prev_FuncParamDef399
// type Any
prev, // definition x_FuncParamDef401
// type Any
x)// scope lambdaBody_414
 => // expression FunCall op||(prev,p(x))
// type Any
// reference op||_403:varName:var[op||_FuncDef895]
// expression VarName op||
// type Any
op||(// reference prev_405:varName:var[prev_FuncParamDef399]
// expression VarName prev
// type Any
prev, // expression FunCall p(x)
// type Any
// reference p_407:varName:var[p_FuncParamDef391]
// expression VarName p
// type Any
p(// reference x_409:varName:var[x_FuncParamDef401]
// expression VarName x
// type Any
x)))// scope funcDef_463
// definition count_FuncDef463
// type ((Any Any) -> Any)

/**
function count(xs, p) 
        = xs.reduce(0, (prev, x) => p(x) ? prev + 1 : prev);    

    
*/
// scope funcDef_463
// definition count_FuncDef463
// type ((Any Any) -> Any)
function count(// definition xs_FuncParamDef426
// type Any
xs, // definition p_FuncParamDef429
// type Any
p)
// expression FunCall reduce(xs,0,lambda458(prev_FuncParamDef437,x_FuncParamDef439)undefined)
// type Any
// reference reduce_432:varName:var[reduce_FuncDef1856]
// expression VarName reduce
// type Any
reduce(// reference xs_434:varName:var[xs_FuncParamDef426]
// expression VarName xs
// type Any
xs, // expression NumLiteral 0
// type Num
0, // scope lambdaExpr_458
// expression Lambda lambda458(prev_FuncParamDef437,x_FuncParamDef439)undefined
// type Lambda
(// definition prev_FuncParamDef437
// type Any
prev, // definition x_FuncParamDef439
// type Any
x)// scope lambdaBody_457
 => // expression ConditionalExpr p(x) ? op+(prev,1) : prev
// type Any
// expression FunCall p(x)
// type Any
// reference p_442:varName:var[p_FuncParamDef429]
// expression VarName p
// type Any
p(// reference x_444:varName:var[x_FuncParamDef439]
// expression VarName x
// type Any
x) ? // expression FunCall op+(prev,1)
// type Any
// reference op+_447:varName:var[op+_FuncDef619]
// expression VarName op+
// type Any
op+(// reference prev_449:varName:var[prev_FuncParamDef437]
// expression VarName prev
// type Any
prev, // expression NumLiteral 1
// type Num
1)// reference prev_454:varName:var[prev_FuncParamDef437]
// expression VarName prev
// type Any
prev)// scope funcDef_490
// definition eq_FuncDef490
// type ((Any Any) -> Any)

/**
function eq(xs, ys) 
        = xs.count == ys.count;    

    
*/
// scope funcDef_490
// definition eq_FuncDef490
// type ((Any Any) -> Any)
function eq(// definition xs_FuncParamDef469
// type Any
xs, // definition ys_FuncParamDef472
// type Any
ys)
// expression FunCall op==(count(xs),count(ys))
// type Any
// reference op==_475:varName:var[op==_FuncDef849]
// expression VarName op==
// type Any
op==(// expression FunCall count(xs)
// type Any
// reference count_476:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_478:varName:var[xs_FuncParamDef469]
// expression VarName xs
// type Any
xs), // expression FunCall count(ys)
// type Any
// reference count_481:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference ys_483:varName:var[ys_FuncParamDef472]
// expression VarName ys
// type Any
ys))// scope funcDef_562
// definition filter_FuncDef562
// type ((Any Any) -> Any)

/**
function filter(xs, p) {
        var ys = xs.mutable;
        var i = 0;
        for (var x in xs) 
            if (p(x)) 
                ys[i++] = x;
        return ys.array.take(i);
    }

    
*/
// scope funcDef_562
// definition filter_FuncDef562
// type ((Any Any) -> Any)
function filter(// definition xs_FuncParamDef496
// type Any
xs, // definition p_FuncParamDef499
// type Any
p)
// scope recCompoundStatement_559
{
// scope compoundStatement_558
{
var // definition ys_VarDef509
// type Any
ys// expression FunCall mutable(xs)
// type Any
// reference mutable_504:varName:var[mutable_FuncDef1072]
// expression VarName mutable
// type Any
mutable(// reference xs_506:varName:var[xs_FuncParamDef496]
// expression VarName xs
// type Any
xs);
var // definition i_VarDef515
// type Num
i// expression NumLiteral 0
// type Num
0;
// scope forLoop_546
// definition x_ForLoopVarDef546
// type Any
for (x in // reference xs_520:varName:var[xs_FuncParamDef496]
// expression VarName xs
// type Any
xs)
if (// expression FunCall p(x)
// type Any
// reference p_522:varName:var[p_FuncParamDef499]
// expression VarName p
// type Any
p(// reference x_524:varName:var[x_ForLoopVarDef546]
// expression VarName x
// type Any
x))// expression VarAssignmentExpr ys = set(ys,++i,x)
// type Void
// reference ys_533:varName:var[ys_VarDef509]
// expression VarName ys
// type Any
ys = // expression FunCall set(ys,++i,x)
// type Any
// reference set_531:varName:var[set_FuncDef1122]
// expression VarName set
// type Any
set(// reference ys_533:varName:var[ys_VarDef509]
// expression VarName ys
// type Any
ys, // expression PostfixInc ++i
// type Num
// reference i_535:varName:var[i_VarDef515]
// expression VarName i
// type Any
i++, // reference x_539:varName:var[x_ForLoopVarDef546]
// expression VarName x
// type Any
x);
return // expression FunCall take(array(ys),i)
// type Any
// reference take_547:varName:var[take_FuncDef910]
// expression VarName take
// type Any
take(// expression FunCall array(ys)
// type Any
// reference array_548:varName:var[array_FuncDef1018, array_FuncDef1138, array_FuncDef1201, array_FuncDef1231, array_FuncDef1266]
// expression VarName array
// type Any
array(// reference ys_550:varName:var[ys_VarDef509]
// expression VarName ys
// type Any
ys), // reference i_554:varName:var[i_VarDef515]
// expression VarName i
// type Any
i);
}
}
// scope funcDef_593
// definition repeat_FuncDef593
// type ((Any Any) -> Any)

/**
function repeat(x, n) 
        = (0 .. n).map(i => x);    

    
*/
// scope funcDef_593
// definition repeat_FuncDef593
// type ((Any Any) -> Any)
function repeat(// definition x_FuncParamDef568
// type Any
x, // definition n_FuncParamDef571
// type Any
n)
// expression FunCall map(op..(0,n),lambda588(i_FuncParamDef583)undefined)
// type Any
// reference map_574:varName:var[map_FuncDef57]
// expression VarName map
// type Any
map(// expression FunCall op..(0,n)
// type Any
(// expression FunCall op..(0,n)
// type Any
// reference op.._575:varName:var[op.._FuncDef941]
// expression VarName op..
// type Any
op..(// expression NumLiteral 0
// type Num
0, // reference n_578:varName:var[n_FuncParamDef571]
// expression VarName n
// type Any
n)), // scope lambdaExpr_588
// expression Lambda lambda588(i_FuncParamDef583)undefined
// type Lambda
(// definition i_FuncParamDef583
// type Any
i)// scope lambdaBody_587
 => // reference x_586:varName:var[x_FuncParamDef568]
// expression VarName x
// type Any
x)// scope funcDef_693
// definition prefixScan_FuncDef693
// type ((Any Any) -> Any)

/**
function prefixScan(xs, op) {
        if (xs.empty) return xs;
        var ys = xs[0].repeat(xs.count).mutable;
        for (var i in 1 .. ys.count)
            ys[i] = op(xs[i], ys[i-1]);
        return ys.array;
    }

    
*/
// scope funcDef_693
// definition prefixScan_FuncDef693
// type ((Any Any) -> Any)
function prefixScan(// definition xs_FuncParamDef599
// type Any
xs, // definition op_FuncParamDef602
// type Any
op)
// scope recCompoundStatement_690
{
// scope compoundStatement_689
{
if (// expression FunCall empty(xs)
// type Any
// reference empty_605:varName:var[empty_FuncDef197]
// expression VarName empty
// type Any
empty(// reference xs_607:varName:var[xs_FuncParamDef599]
// expression VarName xs
// type Any
xs))return // reference xs_612:varName:var[xs_FuncParamDef599]
// expression VarName xs
// type Any
xs;
var // definition ys_VarDef634
// type Any
ys// expression FunCall mutable(repeat(op[](xs,0),count(xs)))
// type Any
// reference mutable_617:varName:var[mutable_FuncDef1072]
// expression VarName mutable
// type Any
mutable(// expression FunCall repeat(op[](xs,0),count(xs))
// type Any
// reference repeat_618:varName:var[repeat_FuncDef593]
// expression VarName repeat
// type Any
repeat(// expression FunCall op[](xs,0)
// type Any
// reference op[]_619:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_621:varName:var[xs_FuncParamDef599]
// expression VarName xs
// type Any
xs, // expression NumLiteral 0
// type Num
0), // expression FunCall count(xs)
// type Any
// reference count_625:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_627:varName:var[xs_FuncParamDef599]
// expression VarName xs
// type Any
xs)));
// scope forLoop_682
// definition i_ForLoopVarDef682
// type Any
for (i in // expression FunCall op..(1,count(ys))
// type Any
// reference op.._638:varName:var[op.._FuncDef941]
// expression VarName op..
// type Any
op..(// expression NumLiteral 1
// type Num
1, // expression FunCall count(ys)
// type Any
// reference count_640:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference ys_642:varName:var[ys_VarDef634]
// expression VarName ys
// type Any
ys)))
// expression VarAssignmentExpr ys = set(ys,i,op(op[](xs,i),op[](ys,op-(i,1))))
// type Void
// reference ys_652:varName:var[ys_VarDef634]
// expression VarName ys
// type Any
ys = // expression FunCall set(ys,i,op(op[](xs,i),op[](ys,op-(i,1))))
// type Any
// reference set_650:varName:var[set_FuncDef1122]
// expression VarName set
// type Any
set(// reference ys_652:varName:var[ys_VarDef634]
// expression VarName ys
// type Any
ys, // reference i_654:varName:var[i_ForLoopVarDef682]
// expression VarName i
// type Any
i, // expression FunCall op(op[](xs,i),op[](ys,op-(i,1)))
// type Any
// reference op_656:varName:var[op_FuncParamDef602]
// expression VarName op
// type Any
op(// expression FunCall op[](xs,i)
// type Any
// reference op[]_657:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_659:varName:var[xs_FuncParamDef599]
// expression VarName xs
// type Any
xs, // reference i_661:varName:var[i_ForLoopVarDef682]
// expression VarName i
// type Any
i), // expression FunCall op[](ys,op-(i,1))
// type Any
// reference op[]_664:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference ys_666:varName:var[ys_VarDef634]
// expression VarName ys
// type Any
ys, // expression FunCall op-(i,1)
// type Any
// reference op-_667:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// reference i_669:varName:var[i_ForLoopVarDef682]
// expression VarName i
// type Any
i, // expression NumLiteral 1
// type Num
1))));
return // expression FunCall array(ys)
// type Any
// reference array_683:varName:var[array_FuncDef1018, array_FuncDef1138, array_FuncDef1201, array_FuncDef1231, array_FuncDef1266]
// expression VarName array
// type Any
array(// reference ys_685:varName:var[ys_VarDef634]
// expression VarName ys
// type Any
ys);
}
}
// scope funcDef_753
// definition adjacentDifferences_FuncDef753
// type ((Any) -> Any)

/**
function adjacentDifferences(xs) 
        = xs.indices.map(i => i > 0 ? xs[i] - xs[i-1] : xs[i]);
    
    
*/
// scope funcDef_753
// definition adjacentDifferences_FuncDef753
// type ((Any) -> Any)
function adjacentDifferences(// definition xs_FuncParamDef699
// type Any
xs)
// expression FunCall map(indices(xs),lambda748(i_FuncParamDef709)undefined)
// type Any
// reference map_702:varName:var[map_FuncDef57]
// expression VarName map
// type Any
map(// expression FunCall indices(xs)
// type Any
// reference indices_703:varName:var[indices_FuncDef262]
// expression VarName indices
// type Any
indices(// reference xs_705:varName:var[xs_FuncParamDef699]
// expression VarName xs
// type Any
xs), // scope lambdaExpr_748
// expression Lambda lambda748(i_FuncParamDef709)undefined
// type Lambda
(// definition i_FuncParamDef709
// type Any
i)// scope lambdaBody_747
 => // expression ConditionalExpr op>(i,0) ? op-(op[](xs,i),op[](xs,op-(i,1))) : op[](xs,i)
// type Any
// expression FunCall op>(i,0)
// type Any
// reference op>_711:varName:var[op>_FuncDef734]
// expression VarName op>
// type Any
op>(// reference i_713:varName:var[i_FuncParamDef709]
// expression VarName i
// type Any
i, // expression NumLiteral 0
// type Num
0) ? // expression FunCall op-(op[](xs,i),op[](xs,op-(i,1)))
// type Any
// reference op-_717:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression FunCall op[](xs,i)
// type Any
// reference op[]_718:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_720:varName:var[xs_FuncParamDef699]
// expression VarName xs
// type Any
xs, // reference i_722:varName:var[i_FuncParamDef709]
// expression VarName i
// type Any
i), // expression FunCall op[](xs,op-(i,1))
// type Any
// reference op[]_725:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_727:varName:var[xs_FuncParamDef699]
// expression VarName xs
// type Any
xs, // expression FunCall op-(i,1)
// type Any
// reference op-_728:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// reference i_730:varName:var[i_FuncParamDef709]
// expression VarName i
// type Any
i, // expression NumLiteral 1
// type Num
1)))// expression FunCall op[](xs,i)
// type Any
// reference op[]_738:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_740:varName:var[xs_FuncParamDef699]
// expression VarName xs
// type Any
xs, // reference i_742:varName:var[i_FuncParamDef709]
// expression VarName i
// type Any
i))// scope funcDef_786
// definition slice_FuncDef786
// type ((Any Any Any) -> Any)

/**
function slice(xs, from, to) 
        = (from .. to).map(xs.at);    

    
*/
// scope funcDef_786
// definition slice_FuncDef786
// type ((Any Any Any) -> Any)
function slice(// definition xs_FuncParamDef759
// type Any
xs, // definition from_FuncParamDef762
// type Any
from, // definition to_FuncParamDef765
// type Any
to)
// expression FunCall map(op..(from,to),at(xs))
// type Any
// reference map_768:varName:var[map_FuncDef57]
// expression VarName map
// type Any
map(// expression FunCall op..(from,to)
// type Any
(// expression FunCall op..(from,to)
// type Any
// reference op.._769:varName:var[op.._FuncDef941]
// expression VarName op..
// type Any
op..(// reference from_771:varName:var[from_FuncParamDef762]
// expression VarName from
// type Any
from, // reference to_773:varName:var[to_FuncParamDef765]
// expression VarName to
// type Any
to)), // expression FunCall at(xs)
// type Any
// reference at_777:varName:var[at_FuncDef218]
// expression VarName at
// type Any
at(// reference xs_779:varName:var[xs_FuncParamDef759]
// expression VarName xs
// type Any
xs))// scope funcDef_835
// definition stride_FuncDef835
// type ((Any Any) -> Any)

/**
function stride(xs, n) 
        = (0 .. xs.count / n).map(i => xs[i * n]);    

    
*/
// scope funcDef_835
// definition stride_FuncDef835
// type ((Any Any) -> Any)
function stride(// definition xs_FuncParamDef792
// type Any
xs, // definition n_FuncParamDef795
// type Any
n)
// expression FunCall map(op..(0,op/(count(xs),n)),lambda830(i_FuncParamDef815)undefined)
// type Any
// reference map_798:varName:var[map_FuncDef57]
// expression VarName map
// type Any
map(// expression FunCall op..(0,op/(count(xs),n))
// type Any
(// expression FunCall op..(0,op/(count(xs),n))
// type Any
// reference op.._799:varName:var[op.._FuncDef941]
// expression VarName op..
// type Any
op..(// expression NumLiteral 0
// type Num
0, // expression FunCall op/(count(xs),n)
// type Any
// reference op/_801:varName:var[op/_FuncDef688]
// expression VarName op/
// type Any
op/(// expression FunCall count(xs)
// type Any
// reference count_802:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_804:varName:var[xs_FuncParamDef792]
// expression VarName xs
// type Any
xs), // reference n_808:varName:var[n_FuncParamDef795]
// expression VarName n
// type Any
n))), // scope lambdaExpr_830
// expression Lambda lambda830(i_FuncParamDef815)undefined
// type Lambda
(// definition i_FuncParamDef815
// type Any
i)// scope lambdaBody_829
 => // expression FunCall op[](xs,op*(i,n))
// type Any
// reference op[]_817:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_819:varName:var[xs_FuncParamDef792]
// expression VarName xs
// type Any
xs, // expression FunCall op*(i,n)
// type Any
// reference op*_820:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// reference i_822:varName:var[i_FuncParamDef815]
// expression VarName i
// type Any
i, // reference n_824:varName:var[n_FuncParamDef795]
// expression VarName n
// type Any
n)))// scope funcDef_888
// definition slices_FuncDef888
// type ((Any Any) -> Any)

/**
function slices(xs, n) 
        = (0 .. n).map(i => xs.slice(i * n, (i+1) * n));    

    
*/
// scope funcDef_888
// definition slices_FuncDef888
// type ((Any Any) -> Any)
function slices(// definition xs_FuncParamDef841
// type Any
xs, // definition n_FuncParamDef844
// type Any
n)
// expression FunCall map(op..(0,n),lambda883(i_FuncParamDef856)undefined)
// type Any
// reference map_847:varName:var[map_FuncDef57]
// expression VarName map
// type Any
map(// expression FunCall op..(0,n)
// type Any
(// expression FunCall op..(0,n)
// type Any
// reference op.._848:varName:var[op.._FuncDef941]
// expression VarName op..
// type Any
op..(// expression NumLiteral 0
// type Num
0, // reference n_851:varName:var[n_FuncParamDef844]
// expression VarName n
// type Any
n)), // scope lambdaExpr_883
// expression Lambda lambda883(i_FuncParamDef856)undefined
// type Lambda
(// definition i_FuncParamDef856
// type Any
i)// scope lambdaBody_882
 => // expression FunCall slice(xs,op*(i,n),op*(op+(i,1),n))
// type Any
// reference slice_858:varName:var[slice_FuncDef786]
// expression VarName slice
// type Any
slice(// reference xs_860:varName:var[xs_FuncParamDef841]
// expression VarName xs
// type Any
xs, // expression FunCall op*(i,n)
// type Any
// reference op*_861:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// reference i_863:varName:var[i_FuncParamDef856]
// expression VarName i
// type Any
i, // reference n_865:varName:var[n_FuncParamDef844]
// expression VarName n
// type Any
n), // expression FunCall op*(op+(i,1),n)
// type Any
// reference op*_868:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*(// expression FunCall op+(i,1)
// type Any
(// expression FunCall op+(i,1)
// type Any
// reference op+_869:varName:var[op+_FuncDef619]
// expression VarName op+
// type Any
op+(// reference i_871:varName:var[i_FuncParamDef856]
// expression VarName i
// type Any
i, // expression NumLiteral 1
// type Num
1)), // reference n_877:varName:var[n_FuncParamDef844]
// expression VarName n
// type Any
n)))// scope funcDef_910
// definition take_FuncDef910
// type ((Any Any) -> Any)

/**
function take(xs, n) 
        = xs.slice(0, n);    

    
*/
// scope funcDef_910
// definition take_FuncDef910
// type ((Any Any) -> Any)
function take(// definition xs_FuncParamDef894
// type Any
xs, // definition n_FuncParamDef897
// type Any
n)
// expression FunCall slice(xs,0,n)
// type Any
// reference slice_900:varName:var[slice_FuncDef786]
// expression VarName slice
// type Any
slice(// reference xs_902:varName:var[xs_FuncParamDef894]
// expression VarName xs
// type Any
xs, // expression NumLiteral 0
// type Num
0, // reference n_905:varName:var[n_FuncParamDef897]
// expression VarName n
// type Any
n)// scope funcDef_941
// definition skip_FuncDef941
// type ((Any Any) -> Any)

/**
function skip(xs, n) 
        = xs.slice(n, xs.count - n);    

    
*/
// scope funcDef_941
// definition skip_FuncDef941
// type ((Any Any) -> Any)
function skip(// definition xs_FuncParamDef916
// type Any
xs, // definition n_FuncParamDef919
// type Any
n)
// expression FunCall slice(xs,n,op-(count(xs),n))
// type Any
// reference slice_922:varName:var[slice_FuncDef786]
// expression VarName slice
// type Any
slice(// reference xs_924:varName:var[xs_FuncParamDef916]
// expression VarName xs
// type Any
xs, // reference n_926:varName:var[n_FuncParamDef919]
// expression VarName n
// type Any
n, // expression FunCall op-(count(xs),n)
// type Any
// reference op-_927:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression FunCall count(xs)
// type Any
// reference count_928:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_930:varName:var[xs_FuncParamDef916]
// expression VarName xs
// type Any
xs), // reference n_934:varName:var[n_FuncParamDef919]
// expression VarName n
// type Any
n))// scope funcDef_970
// definition dropSuffix_FuncDef970
// type ((Any Any) -> Any)

/**
function dropSuffix(xs, n) 
        = xs.take(xs.count - n);    

    
*/
// scope funcDef_970
// definition dropSuffix_FuncDef970
// type ((Any Any) -> Any)
function dropSuffix(// definition xs_FuncParamDef947
// type Any
xs, // definition n_FuncParamDef950
// type Any
n)
// expression FunCall take(xs,op-(count(xs),n))
// type Any
// reference take_953:varName:var[take_FuncDef910]
// expression VarName take
// type Any
take(// reference xs_955:varName:var[xs_FuncParamDef947]
// expression VarName xs
// type Any
xs, // expression FunCall op-(count(xs),n)
// type Any
// reference op-_956:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression FunCall count(xs)
// type Any
// reference count_957:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_959:varName:var[xs_FuncParamDef947]
// expression VarName xs
// type Any
xs), // reference n_963:varName:var[n_FuncParamDef950]
// expression VarName n
// type Any
n))// scope funcDef_999
// definition suffix_FuncDef999
// type ((Any Any) -> Any)

/**
function suffix(xs, n) 
        = xs.skip(xs.count-n);

    
*/
// scope funcDef_999
// definition suffix_FuncDef999
// type ((Any Any) -> Any)
function suffix(// definition xs_FuncParamDef976
// type Any
xs, // definition n_FuncParamDef979
// type Any
n)
// expression FunCall skip(xs,op-(count(xs),n))
// type Any
// reference skip_982:varName:var[skip_FuncDef941]
// expression VarName skip
// type Any
skip(// reference xs_984:varName:var[xs_FuncParamDef976]
// expression VarName xs
// type Any
xs, // expression FunCall op-(count(xs),n)
// type Any
// reference op-_985:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression FunCall count(xs)
// type Any
// reference count_986:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_988:varName:var[xs_FuncParamDef976]
// expression VarName xs
// type Any
xs), // reference n_992:varName:var[n_FuncParamDef979]
// expression VarName n
// type Any
n))// scope funcDef_1045
// definition reverse_FuncDef1045
// type ((Any Any) -> Any)

/**
function reverse(xs, n) 
        = xs.indices.map(i => xs[xs.count-1-i]);    

    
*/
// scope funcDef_1045
// definition reverse_FuncDef1045
// type ((Any Any) -> Any)
function reverse(// definition xs_FuncParamDef1005
// type Any
xs, // definition n_FuncParamDef1008
// type Any
n)
// expression FunCall map(indices(xs),lambda1040(i_FuncParamDef1018)undefined)
// type Any
// reference map_1011:varName:var[map_FuncDef57]
// expression VarName map
// type Any
map(// expression FunCall indices(xs)
// type Any
// reference indices_1012:varName:var[indices_FuncDef262]
// expression VarName indices
// type Any
indices(// reference xs_1014:varName:var[xs_FuncParamDef1005]
// expression VarName xs
// type Any
xs), // scope lambdaExpr_1040
// expression Lambda lambda1040(i_FuncParamDef1018)undefined
// type Lambda
(// definition i_FuncParamDef1018
// type Any
i)// scope lambdaBody_1039
 => // expression FunCall op[](xs,op-(op-(count(xs),1),i))
// type Any
// reference op[]_1020:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_1022:varName:var[xs_FuncParamDef1005]
// expression VarName xs
// type Any
xs, // expression FunCall op-(op-(count(xs),1),i)
// type Any
// reference op-_1023:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression FunCall op-(count(xs),1)
// type Any
// reference op-_1024:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression FunCall count(xs)
// type Any
// reference count_1025:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_1027:varName:var[xs_FuncParamDef1005]
// expression VarName xs
// type Any
xs), // expression NumLiteral 1
// type Num
1), // reference i_1034:varName:var[i_FuncParamDef1018]
// expression VarName i
// type Any
i)))// scope funcDef_1071
// definition gen_FuncDef1071
// type ((Any Any) -> Any)

/**
function gen(cnt, f) 
        = (0 .. cnt).map(f);    

    
*/
// scope funcDef_1071
// definition gen_FuncDef1071
// type ((Any Any) -> Any)
function gen(// definition cnt_FuncParamDef1051
// type Any
cnt, // definition f_FuncParamDef1054
// type Any
f)
// expression FunCall map(op..(0,cnt),f)
// type Any
// reference map_1057:varName:var[map_FuncDef57]
// expression VarName map
// type Any
map(// expression FunCall op..(0,cnt)
// type Any
(// expression FunCall op..(0,cnt)
// type Any
// reference op.._1058:varName:var[op.._FuncDef941]
// expression VarName op..
// type Any
op..(// expression NumLiteral 0
// type Num
0, // reference cnt_1061:varName:var[cnt_FuncParamDef1051]
// expression VarName cnt
// type Any
cnt)), // reference f_1066:varName:var[f_FuncParamDef1054]
// expression VarName f
// type Any
f)// scope funcDef_1141
// definition concat_FuncDef1141
// type ((Any Any) -> Any)

/**
function concat(xs, ys) 
        = gen(xs.count + ys.count, i => i < xs.count ? xs[i] : ys[i - xs.count]);    

    
*/
// scope funcDef_1141
// definition concat_FuncDef1141
// type ((Any Any) -> Any)
function concat(// definition xs_FuncParamDef1077
// type Any
xs, // definition ys_FuncParamDef1080
// type Any
ys)
// expression FunCall gen(op+(count(xs),count(ys)),lambda1136(i_FuncParamDef1099)undefined)
// type Any
// reference gen_1084:varName:var[gen_FuncDef1071]
// expression VarName gen
// type Any
gen(// expression FunCall op+(count(xs),count(ys))
// type Any
// reference op+_1085:varName:var[op+_FuncDef619]
// expression VarName op+
// type Any
op+(// expression FunCall count(xs)
// type Any
// reference count_1086:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_1088:varName:var[xs_FuncParamDef1077]
// expression VarName xs
// type Any
xs), // expression FunCall count(ys)
// type Any
// reference count_1091:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference ys_1093:varName:var[ys_FuncParamDef1080]
// expression VarName ys
// type Any
ys)), // scope lambdaExpr_1136
// expression Lambda lambda1136(i_FuncParamDef1099)undefined
// type Lambda
(// definition i_FuncParamDef1099
// type Any
i)// scope lambdaBody_1135
 => // expression ConditionalExpr op<(i,count(xs)) ? op[](xs,i) : op[](ys,op-(i,count(xs)))
// type Any
// expression FunCall op<(i,count(xs))
// type Any
// reference op<_1101:varName:var[op<_FuncDef780]
// expression VarName op<
// type Any
op<(// reference i_1103:varName:var[i_FuncParamDef1099]
// expression VarName i
// type Any
i, // expression FunCall count(xs)
// type Any
// reference count_1104:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_1106:varName:var[xs_FuncParamDef1077]
// expression VarName xs
// type Any
xs)) ? // expression FunCall op[](xs,i)
// type Any
// reference op[]_1111:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_1113:varName:var[xs_FuncParamDef1077]
// expression VarName xs
// type Any
xs, // reference i_1115:varName:var[i_FuncParamDef1099]
// expression VarName i
// type Any
i)// expression FunCall op[](ys,op-(i,count(xs)))
// type Any
// reference op[]_1118:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference ys_1120:varName:var[ys_FuncParamDef1080]
// expression VarName ys
// type Any
ys, // expression FunCall op-(i,count(xs))
// type Any
// reference op-_1121:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// reference i_1123:varName:var[i_FuncParamDef1099]
// expression VarName i
// type Any
i, // expression FunCall count(xs)
// type Any
// reference count_1124:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_1126:varName:var[xs_FuncParamDef1077]
// expression VarName xs
// type Any
xs))))// scope funcDef_1205
// definition cut_FuncDef1205
// type ((Any Any Any) -> Any)

/**
function cut(xs, from, n) 
        = gen(xs.count - n, i => i < from ? xs[i] : xs[i + n]);    

    
*/
// scope funcDef_1205
// definition cut_FuncDef1205
// type ((Any Any Any) -> Any)
function cut(// definition xs_FuncParamDef1147
// type Any
xs, // definition from_FuncParamDef1150
// type Any
from, // definition n_FuncParamDef1153
// type Any
n)
// expression FunCall gen(op-(count(xs),n),lambda1200(i_FuncParamDef1169)undefined)
// type Any
// reference gen_1157:varName:var[gen_FuncDef1071]
// expression VarName gen
// type Any
gen(// expression FunCall op-(count(xs),n)
// type Any
// reference op-_1158:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression FunCall count(xs)
// type Any
// reference count_1159:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_1161:varName:var[xs_FuncParamDef1147]
// expression VarName xs
// type Any
xs), // reference n_1165:varName:var[n_FuncParamDef1153]
// expression VarName n
// type Any
n), // scope lambdaExpr_1200
// expression Lambda lambda1200(i_FuncParamDef1169)undefined
// type Lambda
(// definition i_FuncParamDef1169
// type Any
i)// scope lambdaBody_1199
 => // expression ConditionalExpr op<(i,from) ? op[](xs,i) : op[](xs,op+(i,n))
// type Any
// expression FunCall op<(i,from)
// type Any
// reference op<_1171:varName:var[op<_FuncDef780]
// expression VarName op<
// type Any
op<(// reference i_1173:varName:var[i_FuncParamDef1169]
// expression VarName i
// type Any
i, // reference from_1175:varName:var[from_FuncParamDef1150]
// expression VarName from
// type Any
from) ? // expression FunCall op[](xs,i)
// type Any
// reference op[]_1178:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_1180:varName:var[xs_FuncParamDef1147]
// expression VarName xs
// type Any
xs, // reference i_1182:varName:var[i_FuncParamDef1169]
// expression VarName i
// type Any
i)// expression FunCall op[](xs,op+(i,n))
// type Any
// reference op[]_1185:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_1187:varName:var[xs_FuncParamDef1147]
// expression VarName xs
// type Any
xs, // expression FunCall op+(i,n)
// type Any
// reference op+_1188:varName:var[op+_FuncDef619]
// expression VarName op+
// type Any
op+(// reference i_1190:varName:var[i_FuncParamDef1169]
// expression VarName i
// type Any
i, // reference n_1192:varName:var[n_FuncParamDef1153]
// expression VarName n
// type Any
n)))// scope funcDef_1244
// definition splice_FuncDef1244
// type ((Any Any Any) -> Any)

/**
function splice(xs, from, ys) 
        = xs.take(from).concat(ys).concat(xs.skip(from));    

    
*/
// scope funcDef_1244
// definition splice_FuncDef1244
// type ((Any Any Any) -> Any)
function splice(// definition xs_FuncParamDef1211
// type Any
xs, // definition from_FuncParamDef1214
// type Any
from, // definition ys_FuncParamDef1217
// type Any
ys)
// expression FunCall concat(concat(take(xs,from),ys),skip(xs,from))
// type Any
// reference concat_1220:varName:var[concat_FuncDef1141]
// expression VarName concat
// type Any
concat(// expression FunCall concat(take(xs,from),ys)
// type Any
// reference concat_1221:varName:var[concat_FuncDef1141]
// expression VarName concat
// type Any
concat(// expression FunCall take(xs,from)
// type Any
// reference take_1222:varName:var[take_FuncDef910]
// expression VarName take
// type Any
take(// reference xs_1224:varName:var[xs_FuncParamDef1211]
// expression VarName xs
// type Any
xs, // reference from_1226:varName:var[from_FuncParamDef1214]
// expression VarName from
// type Any
from), // reference ys_1230:varName:var[ys_FuncParamDef1217]
// expression VarName ys
// type Any
ys), // expression FunCall skip(xs,from)
// type Any
// reference skip_1233:varName:var[skip_FuncDef941]
// expression VarName skip
// type Any
skip(// reference xs_1235:varName:var[xs_FuncParamDef1211]
// expression VarName xs
// type Any
xs, // reference from_1237:varName:var[from_FuncParamDef1214]
// expression VarName from
// type Any
from))// scope funcDef_1264
// definition sum_FuncDef1264
// type ((Any) -> Any)

/**
function sum(xs) 
        = xs.reduce(0, op+);    

    
*/
// scope funcDef_1264
// definition sum_FuncDef1264
// type ((Any) -> Any)
function sum(// definition xs_FuncParamDef1250
// type Any
xs)
// expression FunCall reduce(xs,0,op+)
// type Any
// reference reduce_1253:varName:var[reduce_FuncDef1856]
// expression VarName reduce
// type Any
reduce(// reference xs_1255:varName:var[xs_FuncParamDef1250]
// expression VarName xs
// type Any
xs, // expression NumLiteral 0
// type Num
0, // reference op+_1259:varName:var[op+_FuncDef619]
// expression VarName op+
// type Any
op+)// scope funcDef_1284
// definition product_FuncDef1284
// type ((Any) -> Any)

/**
function product(xs) 
        = xs.reduce(1, op*);    
    
    
*/
// scope funcDef_1284
// definition product_FuncDef1284
// type ((Any) -> Any)
function product(// definition xs_FuncParamDef1270
// type Any
xs)
// expression FunCall reduce(xs,1,op*)
// type Any
// reference reduce_1273:varName:var[reduce_FuncDef1856]
// expression VarName reduce
// type Any
reduce(// reference xs_1275:varName:var[xs_FuncParamDef1270]
// expression VarName xs
// type Any
xs, // expression NumLiteral 1
// type Num
1, // reference op*_1279:varName:var[op*_FuncDef665]
// expression VarName op*
// type Any
op*)// scope funcDef_1308
// definition average_FuncDef1308
// type ((Any) -> Any)

/**
function average(xs) 
        = xs.sum / xs.count;    

    
*/
// scope funcDef_1308
// definition average_FuncDef1308
// type ((Any) -> Any)
function average(// definition xs_FuncParamDef1290
// type Any
xs)
// expression FunCall op/(sum(xs),count(xs))
// type Any
// reference op/_1293:varName:var[op/_FuncDef688]
// expression VarName op/
// type Any
op/(// expression FunCall sum(xs)
// type Any
// reference sum_1294:varName:var[sum_FuncDef1264]
// expression VarName sum
// type Any
sum(// reference xs_1296:varName:var[xs_FuncParamDef1290]
// expression VarName xs
// type Any
xs), // expression FunCall count(xs)
// type Any
// reference count_1299:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_1301:varName:var[xs_FuncParamDef1290]
// expression VarName xs
// type Any
xs))// scope funcDef_1332
// definition minElement_FuncDef1332
// type ((Any) -> Any)

/**
function minElement(xs) 
        = xs.reduce(xs[0], min);    

    
*/
// scope funcDef_1332
// definition minElement_FuncDef1332
// type ((Any) -> Any)
function minElement(// definition xs_FuncParamDef1314
// type Any
xs)
// expression FunCall reduce(xs,op[](xs,0),min)
// type Any
// reference reduce_1317:varName:var[reduce_FuncDef1856]
// expression VarName reduce
// type Any
reduce(// reference xs_1319:varName:var[xs_FuncParamDef1314]
// expression VarName xs
// type Any
xs, // expression FunCall op[](xs,0)
// type Any
// reference op[]_1320:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_1322:varName:var[xs_FuncParamDef1314]
// expression VarName xs
// type Any
xs, // expression NumLiteral 0
// type Num
0), // reference min_1327:varName:var[min_FuncDef84]
// expression VarName min
// type Any
min)// scope funcDef_1356
// definition maxElement_FuncDef1356
// type ((Any) -> Any)

/**
function maxElement(xs) 
        = xs.reduce(xs[0], max);

    
*/
// scope funcDef_1356
// definition maxElement_FuncDef1356
// type ((Any) -> Any)
function maxElement(// definition xs_FuncParamDef1338
// type Any
xs)
// expression FunCall reduce(xs,op[](xs,0),max)
// type Any
// reference reduce_1341:varName:var[reduce_FuncDef1856]
// expression VarName reduce
// type Any
reduce(// reference xs_1343:varName:var[xs_FuncParamDef1338]
// expression VarName xs
// type Any
xs, // expression FunCall op[](xs,0)
// type Any
// reference op[]_1344:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_1346:varName:var[xs_FuncParamDef1338]
// expression VarName xs
// type Any
xs, // expression NumLiteral 0
// type Num
0), // reference max_1351:varName:var[max_FuncDef111]
// expression VarName max
// type Any
max)// scope funcDef_1517
// definition partition_FuncDef1517
// type ((Any Any Any) -> Any)

/**
function partition(a, lo, hi) {
        var pivot = a[lo];
        var i = lo-1;
        var j = hi+1;
        while (true) {
            do { i++; } while (a[i] < pivot);
            do { j--; } while (a[j] > pivot);
            if (i >= j) return j;
            var tmp = a[i];
            a[i] = a[j];
            a[j] = tmp;
        }
        return a;
    }

    
*/
// scope funcDef_1517
// definition partition_FuncDef1517
// type ((Any Any Any) -> Any)
function partition(// definition a_FuncParamDef1362
// type Any
a, // definition lo_FuncParamDef1365
// type Any
lo, // definition hi_FuncParamDef1368
// type Any
hi)
// scope recCompoundStatement_1514
{
// scope compoundStatement_1513
{
var // definition pivot_VarDef1380
// type Any
pivot// expression FunCall op[](a,lo)
// type Any
// reference op[]_1373:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference a_1375:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a, // reference lo_1377:varName:var[lo_FuncParamDef1365]
// expression VarName lo
// type Any
lo);
var // definition i_VarDef1391
// type Any
i// expression FunCall op-(lo,1)
// type Any
// reference op-_1385:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// reference lo_1387:varName:var[lo_FuncParamDef1365]
// expression VarName lo
// type Any
lo, // expression NumLiteral 1
// type Num
1);
var // definition j_VarDef1402
// type Any
j// expression FunCall op+(hi,1)
// type Any
// reference op+_1396:varName:var[op+_FuncDef619]
// expression VarName op+
// type Any
op+(// reference hi_1398:varName:var[hi_FuncParamDef1368]
// expression VarName hi
// type Any
hi, // expression NumLiteral 1
// type Num
1);
while (while (// expression BoolLiteral true
// type Bool
true)
)
while (// expression BoolLiteral true
// type Bool
true)
// scope compoundStatement_1508
{
do
// scope compoundStatement_1412
{
// expression PostfixInc ++i
// type Num
// reference i_1408:varName:var[i_VarDef1391]
// expression VarName i
// type Any
i++;
}
while (// expression FunCall op<(op[](a,i),pivot)
// type Any
// reference op<_1413:varName:var[op<_FuncDef780]
// expression VarName op<
// type Any
op<(// expression FunCall op[](a,i)
// type Any
// reference op[]_1414:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference a_1416:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a, // reference i_1418:varName:var[i_VarDef1391]
// expression VarName i
// type Any
i), // reference pivot_1422:varName:var[pivot_VarDef1380]
// expression VarName pivot
// type Any
pivot))
;
do
// scope compoundStatement_1433
{
// expression PostfixDec --j
// type Num
// reference j_1429:varName:var[j_VarDef1402]
// expression VarName j
// type Any
j--;
}
while (// expression FunCall op>(op[](a,j),pivot)
// type Any
// reference op>_1434:varName:var[op>_FuncDef734]
// expression VarName op>
// type Any
op>(// expression FunCall op[](a,j)
// type Any
// reference op[]_1435:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference a_1437:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a, // reference j_1439:varName:var[j_VarDef1402]
// expression VarName j
// type Any
j), // reference pivot_1443:varName:var[pivot_VarDef1380]
// expression VarName pivot
// type Any
pivot))
;
if (// expression FunCall op>=(i,j)
// type Any
// reference op>=_1449:varName:var[op>=_FuncDef757]
// expression VarName op>=
// type Any
op>=(// reference i_1451:varName:var[i_VarDef1391]
// expression VarName i
// type Any
i, // reference j_1453:varName:var[j_VarDef1402]
// expression VarName j
// type Any
j))return // reference j_1458:varName:var[j_VarDef1402]
// expression VarName j
// type Any
j;
var // definition tmp_VarDef1470
// type Any
tmp// expression FunCall op[](a,i)
// type Any
// reference op[]_1463:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference a_1465:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a, // reference i_1467:varName:var[i_VarDef1391]
// expression VarName i
// type Any
i);
// expression VarAssignmentExpr a = set(a,i,op[](a,j))
// type Void
// reference a_1478:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a = // expression FunCall set(a,i,op[](a,j))
// type Any
// reference set_1476:varName:var[set_FuncDef1122]
// expression VarName set
// type Any
set(// reference a_1478:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a, // reference i_1480:varName:var[i_VarDef1391]
// expression VarName i
// type Any
i, // expression FunCall op[](a,j)
// type Any
// reference op[]_1481:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference a_1483:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a, // reference j_1485:varName:var[j_VarDef1402]
// expression VarName j
// type Any
j));
// expression VarAssignmentExpr a = set(a,j,tmp)
// type Void
// reference a_1498:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a = // expression FunCall set(a,j,tmp)
// type Any
// reference set_1496:varName:var[set_FuncDef1122]
// expression VarName set
// type Any
set(// reference a_1498:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a, // reference j_1500:varName:var[j_VarDef1402]
// expression VarName j
// type Any
j, // reference tmp_1502:varName:var[tmp_VarDef1470]
// expression VarName tmp
// type Any
tmp);
}
// scope compoundStatement_1508
{
do
// scope compoundStatement_1412
{
// expression PostfixInc ++i
// type Num
// reference i_1408:varName:var[i_VarDef1391]
// expression VarName i
// type Any
i++;
}
while (// expression FunCall op<(op[](a,i),pivot)
// type Any
// reference op<_1413:varName:var[op<_FuncDef780]
// expression VarName op<
// type Any
op<(// expression FunCall op[](a,i)
// type Any
// reference op[]_1414:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference a_1416:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a, // reference i_1418:varName:var[i_VarDef1391]
// expression VarName i
// type Any
i), // reference pivot_1422:varName:var[pivot_VarDef1380]
// expression VarName pivot
// type Any
pivot))
;
do
// scope compoundStatement_1433
{
// expression PostfixDec --j
// type Num
// reference j_1429:varName:var[j_VarDef1402]
// expression VarName j
// type Any
j--;
}
while (// expression FunCall op>(op[](a,j),pivot)
// type Any
// reference op>_1434:varName:var[op>_FuncDef734]
// expression VarName op>
// type Any
op>(// expression FunCall op[](a,j)
// type Any
// reference op[]_1435:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference a_1437:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a, // reference j_1439:varName:var[j_VarDef1402]
// expression VarName j
// type Any
j), // reference pivot_1443:varName:var[pivot_VarDef1380]
// expression VarName pivot
// type Any
pivot))
;
if (// expression FunCall op>=(i,j)
// type Any
// reference op>=_1449:varName:var[op>=_FuncDef757]
// expression VarName op>=
// type Any
op>=(// reference i_1451:varName:var[i_VarDef1391]
// expression VarName i
// type Any
i, // reference j_1453:varName:var[j_VarDef1402]
// expression VarName j
// type Any
j))return // reference j_1458:varName:var[j_VarDef1402]
// expression VarName j
// type Any
j;
var // definition tmp_VarDef1470
// type Any
tmp// expression FunCall op[](a,i)
// type Any
// reference op[]_1463:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference a_1465:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a, // reference i_1467:varName:var[i_VarDef1391]
// expression VarName i
// type Any
i);
// expression VarAssignmentExpr a = set(a,i,op[](a,j))
// type Void
// reference a_1478:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a = // expression FunCall set(a,i,op[](a,j))
// type Any
// reference set_1476:varName:var[set_FuncDef1122]
// expression VarName set
// type Any
set(// reference a_1478:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a, // reference i_1480:varName:var[i_VarDef1391]
// expression VarName i
// type Any
i, // expression FunCall op[](a,j)
// type Any
// reference op[]_1481:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference a_1483:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a, // reference j_1485:varName:var[j_VarDef1402]
// expression VarName j
// type Any
j));
// expression VarAssignmentExpr a = set(a,j,tmp)
// type Void
// reference a_1498:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a = // expression FunCall set(a,j,tmp)
// type Any
// reference set_1496:varName:var[set_FuncDef1122]
// expression VarName set
// type Any
set(// reference a_1498:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a, // reference j_1500:varName:var[j_VarDef1402]
// expression VarName j
// type Any
j, // reference tmp_1502:varName:var[tmp_VarDef1470]
// expression VarName tmp
// type Any
tmp);
}
return // reference a_1511:varName:var[a_FuncParamDef1362]
// expression VarName a
// type Any
a;
}
}
// scope funcDef_1613
// definition qsort_FuncDef1613
// type ((Any Any Any) -> Any)

/**
function qsort(a, lo, hi) {
        if (lo < hi) {
            var p = a[lo]; 
            a = partition(a, lo, hi);
            a = qsort(a, lo, p);
            a = qsort(a, p+1, hi);
        }
        return a;
    }

    
*/
// scope funcDef_1613
// definition qsort_FuncDef1613
// type ((Any Any Any) -> Any)
function qsort(// definition a_FuncParamDef1523
// type Any
a, // definition lo_FuncParamDef1526
// type Any
lo, // definition hi_FuncParamDef1529
// type Any
hi)
// scope recCompoundStatement_1610
{
// scope compoundStatement_1609
{
if (// expression FunCall op<(lo,hi)
// type Any
// reference op<_1532:varName:var[op<_FuncDef780]
// expression VarName op<
// type Any
op<(// reference lo_1534:varName:var[lo_FuncParamDef1526]
// expression VarName lo
// type Any
lo, // reference hi_1536:varName:var[hi_FuncParamDef1529]
// expression VarName hi
// type Any
hi))// scope compoundStatement_1604
{
var // definition p_VarDef1549
// type Any
p// expression FunCall op[](a,lo)
// type Any
// reference op[]_1542:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference a_1544:varName:var[a_FuncParamDef1523]
// expression VarName a
// type Any
a, // reference lo_1546:varName:var[lo_FuncParamDef1526]
// expression VarName lo
// type Any
lo);
// expression VarAssignmentExpr a = partition(a,lo,hi)
// type Void
// reference a_1553:varName:var[a_FuncParamDef1523]
// expression VarName a
// type Any
a = // expression FunCall partition(a,lo,hi)
// type Any
// reference partition_1556:varName:var[partition_FuncDef1517]
// expression VarName partition
// type Any
partition(// reference a_1558:varName:var[a_FuncParamDef1523]
// expression VarName a
// type Any
a, // reference lo_1560:varName:var[lo_FuncParamDef1526]
// expression VarName lo
// type Any
lo, // reference hi_1562:varName:var[hi_FuncParamDef1529]
// expression VarName hi
// type Any
hi);
// expression VarAssignmentExpr a = qsort(a,lo,p)
// type Void
// reference a_1569:varName:var[a_FuncParamDef1523]
// expression VarName a
// type Any
a = // expression FunCall qsort(a,lo,p)
// type Any
// reference qsort_1572:varName:var[qsort_FuncDef1613]
// expression VarName qsort
// type Any
qsort(// reference a_1574:varName:var[a_FuncParamDef1523]
// expression VarName a
// type Any
a, // reference lo_1576:varName:var[lo_FuncParamDef1526]
// expression VarName lo
// type Any
lo, // reference p_1578:varName:var[p_VarDef1549]
// expression VarName p
// type Any
p);
// expression VarAssignmentExpr a = qsort(a,op+(p,1),hi)
// type Void
// reference a_1585:varName:var[a_FuncParamDef1523]
// expression VarName a
// type Any
a = // expression FunCall qsort(a,op+(p,1),hi)
// type Any
// reference qsort_1588:varName:var[qsort_FuncDef1613]
// expression VarName qsort
// type Any
qsort(// reference a_1590:varName:var[a_FuncParamDef1523]
// expression VarName a
// type Any
a, // expression FunCall op+(p,1)
// type Any
// reference op+_1591:varName:var[op+_FuncDef619]
// expression VarName op+
// type Any
op+(// reference p_1593:varName:var[p_VarDef1549]
// expression VarName p
// type Any
p, // expression NumLiteral 1
// type Num
1), // reference hi_1598:varName:var[hi_FuncParamDef1529]
// expression VarName hi
// type Any
hi);
}
return // reference a_1607:varName:var[a_FuncParamDef1523]
// expression VarName a
// type Any
a;
}
}
// scope funcDef_1645
// definition sort_FuncDef1645
// type ((Any) -> Any)

/**
function sort(xs) 
        = xs.mutable.qsort(0, xs.count-1).array;    

    
*/
// scope funcDef_1645
// definition sort_FuncDef1645
// type ((Any) -> Any)
function sort(// definition xs_FuncParamDef1619
// type Any
xs)
// expression FunCall array(qsort(mutable(xs),0,op-(count(xs),1)))
// type Any
// reference array_1622:varName:var[array_FuncDef1018, array_FuncDef1138, array_FuncDef1201, array_FuncDef1231, array_FuncDef1266]
// expression VarName array
// type Any
array(// expression FunCall qsort(mutable(xs),0,op-(count(xs),1))
// type Any
// reference qsort_1623:varName:var[qsort_FuncDef1613]
// expression VarName qsort
// type Any
qsort(// expression FunCall mutable(xs)
// type Any
// reference mutable_1624:varName:var[mutable_FuncDef1072]
// expression VarName mutable
// type Any
mutable(// reference xs_1626:varName:var[xs_FuncParamDef1619]
// expression VarName xs
// type Any
xs), // expression NumLiteral 0
// type Num
0, // expression FunCall op-(count(xs),1)
// type Any
// reference op-_1630:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression FunCall count(xs)
// type Any
// reference count_1631:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_1633:varName:var[xs_FuncParamDef1619]
// expression VarName xs
// type Any
xs), // expression NumLiteral 1
// type Num
1)))// scope funcDef_1741
// definition median_FuncDef1741
// type ((Any) -> Any)

/**
function median(xs) {        
        var ys = xs.sort;
        return ys.count % 2 == 0 
            ? ys[ys.count / 2] 
            : ys[ys.count / 2 - 1] + ys[ys.count / 2 + 1] / 2;
    }

    
*/
// scope funcDef_1741
// definition median_FuncDef1741
// type ((Any) -> Any)
function median(// definition xs_FuncParamDef1651
// type Any
xs)
// scope recCompoundStatement_1738
{
// scope compoundStatement_1737
{
var // definition ys_VarDef1661
// type Any
ys// expression FunCall sort(xs)
// type Any
// reference sort_1656:varName:var[sort_FuncDef1645]
// expression VarName sort
// type Any
sort(// reference xs_1658:varName:var[xs_FuncParamDef1651]
// expression VarName xs
// type Any
xs);
return // expression ConditionalExpr op==(op%(count(ys),2),0) ? op[](ys,op/(count(ys),2)) : op+(op[](ys,op-(op/(count(ys),2),1)),op/(op[](ys,op+(op/(count(ys),2),1)),2))
// type Any
// expression FunCall op==(op%(count(ys),2),0)
// type Any
// reference op==_1664:varName:var[op==_FuncDef849]
// expression VarName op==
// type Any
op==(// expression FunCall op%(count(ys),2)
// type Any
// reference op%_1665:varName:var[op%_FuncDef711]
// expression VarName op%
// type Any
op%(// expression FunCall count(ys)
// type Any
// reference count_1666:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference ys_1668:varName:var[ys_VarDef1661]
// expression VarName ys
// type Any
ys), // expression NumLiteral 2
// type Num
2), // expression NumLiteral 0
// type Num
0) ? // expression FunCall op[](ys,op/(count(ys),2))
// type Any
// reference op[]_1677:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference ys_1679:varName:var[ys_VarDef1661]
// expression VarName ys
// type Any
ys, // expression FunCall op/(count(ys),2)
// type Any
// reference op/_1680:varName:var[op/_FuncDef688]
// expression VarName op/
// type Any
op/(// expression FunCall count(ys)
// type Any
// reference count_1681:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference ys_1683:varName:var[ys_VarDef1661]
// expression VarName ys
// type Any
ys), // expression NumLiteral 2
// type Num
2))// expression FunCall op+(op[](ys,op-(op/(count(ys),2),1)),op/(op[](ys,op+(op/(count(ys),2),1)),2))
// type Any
// reference op+_1691:varName:var[op+_FuncDef619]
// expression VarName op+
// type Any
op+(// expression FunCall op[](ys,op-(op/(count(ys),2),1))
// type Any
// reference op[]_1692:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference ys_1694:varName:var[ys_VarDef1661]
// expression VarName ys
// type Any
ys, // expression FunCall op-(op/(count(ys),2),1)
// type Any
// reference op-_1695:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression FunCall op/(count(ys),2)
// type Any
// reference op/_1696:varName:var[op/_FuncDef688]
// expression VarName op/
// type Any
op/(// expression FunCall count(ys)
// type Any
// reference count_1697:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference ys_1699:varName:var[ys_VarDef1661]
// expression VarName ys
// type Any
ys), // expression NumLiteral 2
// type Num
2), // expression NumLiteral 1
// type Num
1)), // expression FunCall op/(op[](ys,op+(op/(count(ys),2),1)),2)
// type Any
// reference op/_1710:varName:var[op/_FuncDef688]
// expression VarName op/
// type Any
op/(// expression FunCall op[](ys,op+(op/(count(ys),2),1))
// type Any
// reference op[]_1711:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference ys_1713:varName:var[ys_VarDef1661]
// expression VarName ys
// type Any
ys, // expression FunCall op+(op/(count(ys),2),1)
// type Any
// reference op+_1714:varName:var[op+_FuncDef619]
// expression VarName op+
// type Any
op+(// expression FunCall op/(count(ys),2)
// type Any
// reference op/_1715:varName:var[op/_FuncDef688]
// expression VarName op/
// type Any
op/(// expression FunCall count(ys)
// type Any
// reference count_1716:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference ys_1718:varName:var[ys_VarDef1661]
// expression VarName ys
// type Any
ys), // expression NumLiteral 2
// type Num
2), // expression NumLiteral 1
// type Num
1)), // expression NumLiteral 2
// type Num
2));
}
}
// scope funcDef_1774
// definition inRange_FuncDef1774
// type ((Any Any) -> Any)

/**
function inRange(xs, n) 
        = n >= 0 && n < xs.count;    

    
*/
// scope funcDef_1774
// definition inRange_FuncDef1774
// type ((Any Any) -> Any)
function inRange(// definition xs_FuncParamDef1747
// type Any
xs, // definition n_FuncParamDef1750
// type Any
n)
// expression FunCall op&&(op>=(n,0),op<(n,count(xs)))
// type Any
// reference op&&_1753:varName:var[op&&_FuncDef872]
// expression VarName op&&
// type Any
op&&(// expression FunCall op>=(n,0)
// type Any
// reference op>=_1754:varName:var[op>=_FuncDef757]
// expression VarName op>=
// type Any
op>=(// reference n_1756:varName:var[n_FuncParamDef1750]
// expression VarName n
// type Any
n, // expression NumLiteral 0
// type Num
0), // expression FunCall op<(n,count(xs))
// type Any
// reference op<_1760:varName:var[op<_FuncDef780]
// expression VarName op<
// type Any
op<(// reference n_1762:varName:var[n_FuncParamDef1750]
// expression VarName n
// type Any
n, // expression FunCall count(xs)
// type Any
// reference count_1763:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_1765:varName:var[xs_FuncParamDef1747]
// expression VarName xs
// type Any
xs)))// scope funcDef_1799
// definition last_FuncDef1799
// type ((Any) -> Any)

/**
function last(xs) 
        = xs[xs.count - 1];    

    
*/
// scope funcDef_1799
// definition last_FuncDef1799
// type ((Any) -> Any)
function last(// definition xs_FuncParamDef1780
// type Any
xs)
// expression FunCall op[](xs,op-(count(xs),1))
// type Any
// reference op[]_1783:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_1785:varName:var[xs_FuncParamDef1780]
// expression VarName xs
// type Any
xs, // expression FunCall op-(count(xs),1)
// type Any
// reference op-_1786:varName:var[op-_FuncDef642]
// expression VarName op-
// type Any
op-(// expression FunCall count(xs)
// type Any
// reference count_1787:varName:var[count_FuncDef463]
// expression VarName count
// type Any
count(// reference xs_1789:varName:var[xs_FuncParamDef1780]
// expression VarName xs
// type Any
xs), // expression NumLiteral 1
// type Num
1))// scope funcDef_1816
// definition first_FuncDef1816
// type ((Any) -> Any)

/**
function first(xs) 
        = xs[0];

    
*/
// scope funcDef_1816
// definition first_FuncDef1816
// type ((Any) -> Any)
function first(// definition xs_FuncParamDef1805
// type Any
xs)
// expression FunCall op[](xs,0)
// type Any
// reference op[]_1808:varName:var[op[]_FuncDef964]
// expression VarName op[]
// type Any
op[](// reference xs_1810:varName:var[xs_FuncParamDef1805]
// expression VarName xs
// type Any
xs, // expression NumLiteral 0
// type Num
0)// scope funcDef_1856
// definition reduce_FuncDef1856
// type ((Any Any Any) -> Any)

/**
function reduce(xs, acc, f) {
        // TODO: support 'for' loops as expressions 
        // TODO: support 'assignment' as expressions. 
        for (var x in xs)
            acc = f(acc, x);
        return acc;
    }

    
*/
// scope funcDef_1856
// definition reduce_FuncDef1856
// type ((Any Any Any) -> Any)
function reduce(// definition xs_FuncParamDef1822
// type Any
xs, // definition acc_FuncParamDef1825
// type Any
acc, // definition f_FuncParamDef1828
// type Any
f)
// scope recCompoundStatement_1853
{
// scope compoundStatement_1852
{
// scope forLoop_1848
// definition x_ForLoopVarDef1848
// type Any
for (x in // reference xs_1833:varName:var[xs_FuncParamDef1822]
// expression VarName xs
// type Any
xs)
// expression VarAssignmentExpr acc = f(acc,x)
// type Void
// reference acc_1835:varName:var[acc_FuncParamDef1825]
// expression VarName acc
// type Any
acc = // expression FunCall f(acc,x)
// type Any
// reference f_1838:varName:var[f_FuncParamDef1828]
// expression VarName f
// type Any
f(// reference acc_1840:varName:var[acc_FuncParamDef1825]
// expression VarName acc
// type Any
acc, // reference x_1842:varName:var[x_ForLoopVarDef1848]
// expression VarName x
// type Any
x);
return // reference acc_1850:varName:var[acc_FuncParamDef1825]
// expression VarName acc
// type Any
acc;
}
}
// scope funcDef_1875
// definition flatten_FuncDef1875
// type ((Any) -> Any)

/**
function flatten(xs)
        = xs.reduce([], concat);

    
*/
// scope funcDef_1875
// definition flatten_FuncDef1875
// type ((Any) -> Any)
function flatten(// definition xs_FuncParamDef1862
// type Any
xs)
// expression FunCall reduce(xs,[],concat)
// type Any
// reference reduce_1865:varName:var[reduce_FuncDef1856]
// expression VarName reduce
// type Any
reduce(// reference xs_1867:varName:var[xs_FuncParamDef1862]
// expression VarName xs
// type Any
xs, // expression ArrayLiteral []
// type Array
[], // reference concat_1870:varName:var[concat_FuncDef1141]
// expression VarName concat
// type Any
concat)// scope funcDef_1899
// definition flatMap_FuncDef1899
// type ((Any Any) -> Any)

/**
function flatMap(xs, f)       
        = xs.map(f).flatten;

*/
// scope funcDef_1899
// definition flatMap_FuncDef1899
// type ((Any Any) -> Any)
function flatMap(// definition xs_FuncParamDef1881
// type Any
xs, // definition f_FuncParamDef1884
// type Any
f)
// expression FunCall flatten(map(xs,f))
// type Any
// reference flatten_1887:varName:var[flatten_FuncDef1875]
// expression VarName flatten
// type Any
flatten(// expression FunCall map(xs,f)
// type Any
// reference map_1888:varName:var[map_FuncDef57]
// expression VarName map
// type Any
map(// reference xs_1890:varName:var[xs_FuncParamDef1881]
// expression VarName xs
// type Any
xs, // reference f_1892:varName:var[f_FuncParamDef1884]
// expression VarName f
// type Any
f))}
