language heron:std:0.1;

// An intrinsic is a function that has an implementation provided by the compiler.

module heron:intrinsics:0.1
{    
    type Float;
    type Float2; // = { x:Float, y:Float }
    type Float3; // = { x:Float, y:Float, z:Float }
    type Float4; // = { x:Float, y:Float, z:Float, w:Float }
    type Bool; 
    type Num; // 
    type String;
    type Array; // = { count:Int, at:Func<Int, T> }

    var pi = 3.14159265358979323846;
    var e = 2.71828182845904523536;

    intrinsic float2(x: Float, y: Float): Float2;    
    intrinsic x(v: Float2): Float;
    intrinsic y(v: Float2): Float;

    intrinsic float3(x: Float, y: Float, z: Float): Float3;
    intrinsic x(v: Float3): Float;
    intrinsic y(v: Float3): Float;
    intrinsic z(v: Float3): Float;

    intrinsic float4(x: Float, y: Float, z: Float, w: Float): Float4;
    intrinsic x(v: Float4): Float;
    intrinsic y(v: Float4): Float;
    intrinsic z(v: Float4): Float;
    intrinsic w(v: Float4): Float;

    intrinsic abs<T>(x: T): T;
    intrinsic acos<T>(x: T): T;
    intrinsic asin<T>(x: T): T;
    intrinsic atan<T>(x: T): T;
    intrinsic atan2<T>(y: T, x: T): T;
    intrinsic ceil<T>(x: T, y: T): T;
    intrinsic ceil<T>(x: T): T;
    intrinsic clamp<T>(x: T, min: T, max: T): T;
    intrinsic cos<T>(x: T): T;
    intrinsic exp<T>(x: T): T;
    intrinsic floor<T>(x: T): T;
    intrinsic log<T>(x: T): T;
    intrinsic max<T>(x: T, y: T): T;
    intrinsic min<T>(x: T, y: T): T;
    intrinsic pow<T>(x: T, y: T): T;
    intrinsic round<T>(x: T): T;
    intrinsic sin<T>(x: T): T;
    intrinsic sign<T>(x: T): T;
    intrinsic sqrt<T>(x: T): T;
    intrinsic tan<T>(x: T): T;    

    intrinsic op+ <T>(x: T, y: T): T;
    intrinsic op- <T>(x: T, y: T): T;
    intrinsic op* <T>(x: T, y: T): T;
    intrinsic op/ <T>(x: T, y: T): T;
    intrinsic op% <T>(x: T, y: T): T;

    intrinsic op>  <T>(x: T, y: T): Bool;
    intrinsic op>= <T>(x: T, y: T): Bool;
    intrinsic op<  <T>(x: T, y: T): Bool;
    intrinsic op<= <T>(x: T, y: T): Bool;
    intrinsic op!= <T>(x: T, y: T): Bool;
    intrinsic op== <T>(x: T, y: T): Bool;

    intrinsic op_at <T>(x: Array, i: Num): Any;
    intrinsic op_range <T>(from: Num, to: Num): Array;
}