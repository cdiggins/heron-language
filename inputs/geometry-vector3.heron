language heron:std:0:1;

module heron:std:geometry:vector:0.1
{
    // Several algorithms inspired by the following: 
    // https://referencesource.microsoft.com/#System.Numerics/System/Numerics/Vector3
    // https://referencesource.microsoft.com/#System.Numerics/System/Numerics/Vector3_Intrinsics.cs

    //import { sqrt } from heron:std:math:0.1;

    function vector(x, y, z) 
        = { x=x; y=y; z=z; };

    function vector(xs)
        = vector(xs[0], xs[1], xs[2]);

    var origin  = vector(0, 0, 0);
    var ones    = vector(1, 1, 1);
    var xaxis   = vector(1, 0, 0);
    var yaxis   = vector(0, 1, 0);
    var zaxis   = vector(0, 0, 1);

    function array(v) 
        = [v.x, v.y, v.z];

    function zip(a, b, op) 
        = zip(a.array, b.array, op).vector;

    function map(v, op)
        = v.array.map(op).vector;

    function sum(v) 
        = v.x + v.y + v.z;
    
    function dot(a, b) 
        = sum(a * b);    
    
    function length(v) 
        = sqrt(v.length2);    
    
    function length2(v) 
        = v.dot(v);        

    function op-(a, b) 
        = zip(a, b, op-);
    
    function op+(a, b) 
        = zip(a, b, op+);
    
    function op*(a, b) 
        = zip(a, b, op*);
    
    function op/(a, b) 
        = zip(a, b, op/);
    
    function op%(a, b) 
        = zip(a, b, op%);
    
    function op==(a, b) 
        = zip(a, b, op==);
    
    function op!=(a, b) 
        = zip(a, b, op!=);
    
    function op>=(a, b) 
        = zip(a, b, op>=);

    function op<=(a, b) 
        = zip(a, b, op<=);

    function op>(a, b) 
        = zip(a, b, op>);

    function op<(a, b) 
        = zip(a, b, op<);

    function op+(v, x) 
        = map(v, e => e + x);

    function op-(v, x) 
        = map(v, e => e - x);

    function op*(v, x) 
        = map(v, e => e * x);

    function op/(v, x) 
        = map(v, e => e / x);

    function op%(v, x) 
        = map(v, e => e % x);

    function dist(a, b)
        = (a - b).length;

    function dist2(a, b)
        = (a - b).length2;

    function normal(v) 
        = v / v.length;

    function cross(a, b)
        = vector3(a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x);

    function reflect(v, n)
        = v - (n * dot(v, n) * 2.0);

    function clamp(f, min, max) 
        = f > max ? max : (f < min ? min : f);

    function clamp(v, min, max)
        = vector(clamp(v.x, min.x, max.x), clamp(v.y, min.y, max.y), clamp(v.z, min.z, max.z));

    function lerp(a, b, x)
        = a * (1.0 - x) + b * x;
    
    function min(a, b)
        = a < b ? a : b;

    function max(a, b)
        = a < b ? a : b;
        
    function min(a, b)
        = zip(a, b, min);

    function max(a, b)
        = zip(a, b, max);

    function sqrt(v)
        = v.map(sqrt);
}