language heron:std:0.1;

// Describes the core functionality provided by the run-time.
module heron:intrinsics:0.1
{
    // Built-in types 
    type Float;
    type Float2;
    type Float3; 
    type Float4; 
    type Int;
    type Bool; 
    type Array; 
    type ArrayBuilder;
    type Func;
    type Any;

    // Intrinsic (built-in) functions. 
    intrinsic float2(x: Float, y: Float): Float2;    
    intrinsic x(v: Float2): Float;
    intrinsic y(v: Float2): Float;
    
    intrinsic float3(x: Float, y: Float, z: Float): Float3;
    intrinsic z(v: Float3): Float;

    intrinsic float4(x: Float, y: Float, z: Float, w: Float): Float4;    
    intrinsic w(v: Float4): Float;    

    // Todo: eventually provide Float2, Float3, Float4 versions of these.
    // This is because a lot of hardware supports these at the lowest-level. 
    // Implementing them in a high-level language is fine as a fall-back. 
    intrinsic abs(x: Float): Float;
    intrinsic acos(x: Float): Float;
    intrinsic asin(x: Float): Float;
    intrinsic atan(x: Float): Float;
    intrinsic atan2(y: Float, x: Float): Float;
    intrinsic ceil(x: Float): Float;
    intrinsic clamp(x: Float, min: Float, max: Float): Float;
    intrinsic cos(x: Float): Float;
    intrinsic exp(x: Float): Float;
    intrinsic floor(x: Float): Float;
    intrinsic log(x: Float): Float;
    intrinsic pow(x: Float, y: Float): Float;
    intrinsic round(x: Float): Float;
    intrinsic sin(x: Float): Float;
    intrinsic sign(x: Float): Float;
    intrinsic sqrt(x: Float): Float;
    intrinsic tan(x: Float): Float;    

    // Binary operators 
    intrinsic op+ <T>(x: T, y: T): T;
    intrinsic op- <T>(x: T, y: T): T;
    intrinsic op* <T>(x: T, y: T): T;
    intrinsic op/ <T>(x: T, y: T): T;
    intrinsic op% <T>(x: T, y: T): T;

    // Comparison operators 
    intrinsic op>  <T>(x: T, y: T): Bool;
    intrinsic op>= <T>(x: T, y: T): Bool;
    intrinsic op<  <T>(x: T, y: T): Bool;
    intrinsic op<= <T>(x: T, y: T): Bool;

    // Equality operators 
    intrinsic op!= <T>(x: T, y: T): Bool;
    intrinsic op== <T>(x: T, y: T): Bool;

    // Boolean operators
    intrinsic op&& (x: Bool, y: Bool): Bool;
    intrinsic op|| (x: Bool, y: Bool): Bool;
    intrinsic op^^ (x: Bool, y: Bool): Bool;

    // Non-binary operators. These have identifier names.
    intrinsic op_not(x: Bool): Bool;
    intrinsic op_negate(x: Float): Float;

    // Array functions 
    intrinsic array<T>(n: Int, f: Func<Int, T>): Array<T>;
    intrinsic count<T>(xs: Array<T>): Int;
    intrinsic at<T>(xs: Array<T>, i: Int): T;     

    // Array builder functions77
    intrinsic mutable<T>(xs: Array<T>): ArrayBuilder<T>;
    intrinsic push<T>(xs: ArrayBuilder<T>, x: T): ArrayBuilder<T>;
    intrinsic set<T>(xs: ArrayBuilder<T>, i: Int, x: T): ArrayBuilder<T>;
    intrinsic array<T>(xs: ArrayBuilder<T>): Array<T>;
    
    // Some helpers (todo: move to a separate library)
    function array(v: Float2) = [v.x, v.y];    
    function array(v: Float3) = [v.x, v.y, v.z];
    function array(v: Float4) = [v.x, v.y, v.z, v.w];

    function float2(xs) = float2(xs[0], xs[1]);
    function float3(xs) = float3(xs[0], xs[1], xs[2]);
    function float4(xs) = float4(xs[0], xs[1], xs[2], xs[3]);    

    // Range operator 
    function op.. (from: Int, upto: Int): Array<Int>
        = array(upto - from, (i) => i + upto);

    // Indexing operator
    function op[] <T>(xs: Array<T>, i: Int): T
        = at(xs, i);    

    // A couple of useful constants 
    var pi = 3.14159265358979323846;
    var e = 2.71828182845904523536;

    // Yep. We need this for now.
    intrinsic print(x);
    intrinsic assert(x: Bool);
}
