language heron:std:0.1;

// https://prideout.net/blog/?p=44
// https://github.com/mrdoob/three.js/blob/master/src/geometries/ParametricGeometry.js
// https://paulbourke.net/geometry/
// https://github.com/mrdoob/three.js/tree/master/src/geometries

// TODO: https://github.com/mrdoob/three.js/blob/master/src/geometries/TorusKnotGeometry.js
module heron:geometry.mesh:0.1
{
    import heron:std.array:0.1;
    import heron:geometry.vector:0.1;

    // Platonic solids 

    var tetrahedron
        = mesh(
        [
            1, 1, 1,   
            -1, -1, 1,   
            -1, 1, -1,   
            1, -1, -1
        ], 
        [
            2, 1, 0,    
            0, 3, 2,	
            1, 3, 0,	 
            2, 3, 1
        ]);

    var cube
        = mesh(
        [
            // front
            -1.0, -1.0,  1.0,
            1.0, -1.0,  1.0,
            1.0,  1.0,  1.0,
            -1.0,  1.0,  1.0,
            // back
            -1.0, -1.0, -1.0,
            1.0, -1.0, -1.0,
            1.0,  1.0, -1.0,
            -1.0,  1.0, -1.0
        ], 
        [
            // front
            0, 1, 2, 2, 3, 0,
            // right
            1, 5, 6, 6, 2, 1,
            // back
            7, 6, 5, 5, 4, 7,
            // left
            4, 0, 3, 3, 7, 4,
            // bottom
            4, 5, 1, 1, 0, 4,
            // top
            3, 2, 6, 6, 7, 3
        ]);

    // https://github.com/mrdoob/three.js/blob/master/src/geometries/OctahedronGeometry.js
    var octahedron
        = mesh(
            [
            1, 0, 0, 	-1, 0, 0,	0, 1, 0,
            0, -1, 0, 	0, 0, 1,	0, 0, -1
	    ],
        [
            0, 2, 4,	0, 4, 3,	0, 3, 5,
            0, 5, 2,	1, 2, 5,	1, 5, 3,
            1, 3, 4,	1, 4, 2
    	]);

    // https://github.com/mrdoob/three.js/blob/master/src/geometries/DodecahedronGeometry.js
    var dodecahedron =
	    var t = (1 + sqrt(5)) / 2 in
	    var r = 1 / t in 
        mesh([
            -1, -1, -1,	-1, -1, 1,
            -1, 1, -1, -1, 1, 1,
            1, -1, -1, 1, -1, 1,
            1, 1, -1, 1, 1, 1,

            // (0, +/-1/theta, +/-theta)
            0, -r, -t, 0, -r, t,
            0, r, -t, 0, r, t,

            // (+/-1/theta, +/-theta, 0)
            -r, -t, 0, -r, t, 0,
            r, -t, 0, r, t, 0,

            // (+/-theta, 0, +/-1/theta)
            -t, 0, -r, t, 0, -r,
            -t, 0, r, t, 0, r
        ],
        [
            3, 11, 7, 	3, 7, 15, 	3, 15, 13,
            7, 19, 17, 	7, 17, 6, 	7, 6, 15,
            17, 4, 8, 	17, 8, 10, 	17, 10, 6,
            8, 0, 16, 	8, 16, 2, 	8, 2, 10,
            0, 12, 1, 	0, 1, 18, 	0, 18, 16,
            6, 10, 2, 	6, 2, 13, 	6, 13, 15,
            2, 16, 18, 	2, 18, 3, 	2, 3, 13,
            18, 1, 9, 	18, 9, 11, 	18, 11, 3,
            4, 14, 12, 	4, 12, 0, 	4, 0, 8,
            11, 9, 5, 	11, 5, 19, 	11, 19, 7,
            19, 5, 14, 	19, 14, 4, 	19, 4, 17,
            1, 12, 14, 	1, 14, 5, 	1, 5, 9
        ]);


    // https://github.com/mrdoob/three.js/blob/master/src/geometries/IcosahedronGeometry.js
    var icosahedron
        = var t = (1 + sqrt(5)) / 2 in
            mesh([
                -1, t, 0,   1, t, 0,   -1, -t, 0,   1, -t, 0,
                0, -1, t,   0, 1, t,   0, -1, -t,   0, 1, -t,
                t, 0, -1,   t, 0, 1,   -t, 0, -1,   -t, 0, 1
            ],
            [
                0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
                1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
                3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
                4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
            ]);   

    // Parametric geometry creation

    // Given a number of points (vectors) arranged as a quad strip of "rows"
    // will return a set of indices representing the triangulated indices.
    function quadStripToMeshIndices(vertices, rows, connectRows, connectCols) {
        var cols = vertices.count / rows;
        var nr = connectRows ? rows : rows-1;
        var nc = connectCols ? cols : cols-1;
        var indices = [].mutable;
        for (var row in 0..nr) {
            for (var col in 0..nc) {                
                // Rows increase from bottom to top
                // Columns increase from left to right
                // row r + 1 = ... d c ... 
                // row r     = ... a b ... 
                var a = col + row * cols;
                var b = (col+1) % (cols) + row * cols;
                var c = (col+1) % (cols) + (row+1) % (rows) * cols;
                var d = col + (row+1) % (rows) * cols;
                indices = indices.pushMany([a, b, d]);
                indices = indices.pushMany([b, c, d]);            
            }
        }
        return indices.immutable;
    }
    
    // Converts an array of vectors into a vertex buffer 
    // which is an array of floating point numbers 
    function vectorsToVertexBuffer(xs) 
        = xs.flatMap(v => [v.x, v.y, v.z]);

    // Converts from UV coordinates to a float3
    function vector(uv: Float2)
        = float3(-uv.x.cos * uv.y.sin, uv.x.cos, uv.x.sin * uv.y.sin);
    
    // Works for Float, Float2, Float3, and Float4
    function rescale(v, from, length)
        = from + (v * length);

    // Given a function that converts UV coordinates to vectors, creates an 
    // array of points (uCount x vCount) starting at uStart,vStart (0,0) going to 
    // uLength, vLength (1,1)
    function meshFromUV(f, uCount, vCount, uStart, vStart, uLength, vLength) {
        var points = cartesianProduct(0..vCount, 0..vCount, 
            (u, v) => f(
                u / uCount.float * uLength + uStart, 
                v / vCount.float * vLength + vStart));
        var indices = quadStripToMeshIndices(points, vCount, true, true);
        return mesh(vectorsToVertexBuffer(points), indices);
    }

    function meshFromUV(f, segments)
        = meshFromUV(f, segments, segments, 0, 0, 1, 1);

    // Given UV coordinates on the surface of a sphere u=[0,1), v=[0,1) computes the 3D location.
    function spherePoint(u, v)
        = vector(-cos(u*2*pi) * sin(v*2*pi), cos(v*2*pi), sin(u*2*pi) * sin(v*2*pi));

    function sphere(segments) 
        = meshFromUV(spherePoint, segments);
    
    function sphere()
        = sphere(32);

    // Given UV coordinates on the surface of a cylinder u=[0,1), v=[0,1) computes the 3D location.
    function cylinderPoint(u, v) 
        = vector(sin(u*2*pi), v, cos(u*2*pi));

    function cylinder(segments) 
        = meshFromUV(cylinderPoint, segments);
    
    function cylinder()
        = cylinder(32);

    function torus(r1, r2, segments)
        = meshFromUV((u,v) => torusPoint(u, v, r1, r2), segments);

    // Given UV coordinates u=[0,1), v=[0,1), and a major radius (donut) 
    // and a minor radius (tube) computes the 3D location of the torus
    function torusPoint(u, v, r1, r2)
        = vector(
			(r1 + r2 * cos(v*2*pi)) * cos(u*2*pi),
			(r1 + r2 * cos(v*2*pi)) * sin(u*2*pi),
			r2 * sin(v*2*pi));

    function torus()
        = torus(10, 2, 32);

    function vertexCount(mesh)
        = mesh.vertexBuffer.count / 3;

    function faceCount(mesh)
        = mesh.indexBuffer.count / 3;

    function vertex(mesh, i)
        = mesh.vertexBuffer.take(i * 3, 3).vector;

    function vertices(mesh) 
        = mesh.vertexCount.array(i => vertex(mesh, i));

    function setVertices(m, points)
        = mesh(points, m.indexBuffer);

    function transform(m, f)
        = m.setVertices(m.vertices.map(f));

    function translate(m, amount)
        = m.transform(v => v + amount);

    function scale(m, amount)
        = m.transform(v => v * amount);
}