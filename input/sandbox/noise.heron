// https://thebookofshaders.com/12/
// https://github.com/ashima/webgl-noise/blob/master/src/classicnoise2D.glsl
// https://github.com/ashima/webgl-noise/blob/master/src/cellular2D.glsl 
// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83

/*
Improving Noise, Ken Perlin http://mrl.nyu.edu/~perlin/paper445.pdf

Perlin Noise, Hugo Elias http://freespace.virgin.net/hugo.elias/models/m_perlin.htm

Implementation of Perlin Noise on GPU, Leena Kora http://www.sci.utah.edu/~leenak/IndStudy_reportfall/Perlin%20Noise%20on%20GPU.html

Implementing Improved Perlin Noise, Simon Green http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter26.html

Perlin Noise http://mines.lumpylumpy.com/Electronics/Computers/Software/Cpp/Graphics/Bitmap/Textures/Noise/Perlin.php#.U7Fvs41dVhs

Simplex Noise http://mines.lumpylumpy.com/Electronics/Computers/Software/Cpp/Graphics/Bitmap/Textures/Noise/Simplex.php#.U7FwI41dVhs

Voronoise http://mines.lumpylumpy.com/Electronics/Computers/Software/Cpp/Graphics/Bitmap/Textures/Noise/Voronoi.php#.U7FwM41dVhs

Voronoise, inigo quilez http://iquilezles.org/www/articles/voronoise/voronoise.htm

Voronoi Noise, http://www.pixeleuphoria.com/node/34

Mosaic Noise http://mines.lumpylumpy.com/Electronics/Computers/Software/Cpp/Graphics/Bitmap/Textures/Noise/Mosaic.php#.U7FwZo1dVhs

Inigo Quilez http://iquilezles.org/www/articles/morenoise/morenoise.htm

Examples:

Andrew Baldwin http://thndl.com/?15

https://code.google.com/archive/p/fractalterraingeneration/wikis/Simplex_Noise.wiki
https://code.google.com/archive/p/fractalterraingeneration/wikis/Perlin_Noise.wiki
https://code.google.com/archive/p/fractalterraingeneration/wikis/Erosion_Models.wiki
https://code.google.com/archive/p/fractalterraingeneration/wikis/Value_Noise.wiki
https://code.google.com/archive/p/fractalterraingeneration/wikis/Diamond_Square.wiki
https://code.google.com/archive/p/fractalterraingeneration/wikis/Fractional_Brownian_Motion.wiki
https://code.google.com/archive/p/fractalterraingeneration/wikis/Midpoint_Displacement.wiki
https://code.google.com/archive/p/fractalterraingeneration/wikis/Cell_Noise.wiki
https://www.redblobgames.com/maps/terrain-from-noise/
https://www.redblobgames.com/articles/noise/2d/#spectrum
https://thebookofshaders.com/edit.php#12/vorono-01.frag
*/

module noise
{
    // Begin IQ's simplex noise:
    // The MIT License
    // Copyright Â© 2013 Inigo Quilez
    // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    function noise( p )
    {
        function hash( p ) 
        {
            // Note from IQ
            // replace this by something better
            p = vec2( dot(p,vec2(127.1,311.7)),
                    dot(p,vec2(269.5,183.3)) );

            return -1.0 + 2.0*fract(sin(p)*43758.5453123);
        }

        const K1 = 0.366025404; // (sqrt(3)-1)/2;
        const K2 = 0.211324865; // (3-sqrt(3))/6;

        const i = floor( p + (p.x+p.y)*K1 );
        
        const a = p - i + (i.x+i.y)*K2;
        const o = step(a.yx,a.xy);    
        const b = a - o + K2;
        const c = a - 1.0 + 2.0*K2;

        const h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );

        const n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));

        return dot( n, vec3(70.0) );        
    }
}

    /*
    // Begin: https://github.com/ashima/webgl-noise/blob/master/src/cellular2D.glsl

    // Cellular noise ("Worley noise") in 2D in GLSL.
    // Copyright (c) Stefan Gustavson 2011-04-19. All rights reserved.
    // This code is released under the conditions of the MIT license.
    // See LICENSE file for details.
    // https://github.com/stegu/webgl-noise

    function modulo(x, y)
        = x - floor(x * (1.0.vector / y)) * y;    

    // Permutation polynomial: (34x^2 + x) mod 289
    function permute(x) 
        = (34.0 * x + 1.0) * x).modulo(289);

    // Cellular noise, returning F1 and F2 in a vec2.
    // Standard 3x3 search window for good F1 and F2 values
    function cellular(vec2 P) {
        var K = 1.0 / 7.0;
        var Ko = 3.0 / 7.0;
        var jitter = 1.0; // Less gives more regular pattern
        var Pi = mod289(floor(P));
        var Pf = fract(P);
        var oi = vec3(-1.0, 0.0, 1.0);
        var of = vec3(-0.5, 0.5, 1.5);
        var px = permute(Pi.x + oi);
        var p = permute(px.x + Pi.y + oi); // p11, p12, p13
        var ox = fract(p*K) - Ko;
        var oy = mod7(floor(p*K))*K - Ko;
        var dx = Pf.x + 0.5 + jitter*ox;
        vec3 dy = Pf.y - of + jitter*oy;
        vec3 d1 = dx * dx + dy * dy; // d11, d12 and d13, squared
        p = permute(px.y + Pi.y + oi); // p21, p22, p23
        ox = fract(p*K) - Ko;
        oy = mod7(floor(p*K))*K - Ko;
        dx = Pf.x - 0.5 + jitter*ox;
        dy = Pf.y - of + jitter*oy;
        var d2 = dx * dx + dy * dy; // d21, d22 and d23, squared
        p = permute(px.z + Pi.y + oi); // p31, p32, p33
        ox = fract(p*K) - Ko;
        oy = mod7(floor(p*K))*K - Ko;
        dx = Pf.x - 1.5 + jitter*ox;
        dy = Pf.y - of + jitter*oy;
        var d3 = dx * dx + dy * dy; // d31, d32 and d33, squared
        
        // Sort out the two smallest distances (F1, F2)
        var d1a = min(d1, d2);
        d2 = max(d1, d2); // Swap to keep candidates for F2
        d2 = min(d2, d3); // neither F1 nor F2 are now in d3
        d1 = min(d1a, d2); // F1 is now in d1
        d2 = max(d1a, d2); // Swap to keep candidates for F2
        d1.xy = (d1.x < d1.y) ? d1.xy : d1.yx; // Swap if smaller
        d1.xz = (d1.x < d1.z) ? d1.xz : d1.zx; // F1 is in d1.x
        d1.yz = min(d1.yz, d2.yz); // F2 is now not in d2.yz
        d1.y = min(d1.y, d1.z); // nor in  d1.z
        d1.y = min(d1.y, d2.x); // F2 is in d1.y, we're done.
        return sqrt(d1.xy);
    }
    
    // End cellular noise 
    */
